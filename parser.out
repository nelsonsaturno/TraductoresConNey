Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> Program Cuerpo
Rule 2     epsilon -> <empty>
Rule 3     Boolean -> False
Rule 4     Boolean -> True
Rule 5     id -> ID
Rule 6     Strings -> String
Rule 7     Numeros -> Number
Rule 8     Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra
Rule 9     Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra
Rule 10    Aux_ListaNumeros -> Numeros
Rule 11    Aux_ListaNumeros -> Expresion
Rule 12    ListaNumeros -> Aux_ListaNumeros
Rule 13    ListaNumeros -> ListaNumeros Coma Aux_ListaNumeros
Rule 14    Asignacion -> id Equal Expresion
Rule 15    Scaneo -> Scan id
Rule 16    PrintLneo -> PrintLn ListaComa
Rule 17    Printeo -> Print ListaComa
Rule 18    TipoImpresion -> Strings
Rule 19    TipoImpresion -> Expresion
Rule 20    ListaComa -> TipoImpresion
Rule 21    ListaComa -> ListaComa Coma TipoImpresion
Rule 22    Instruccion_Type -> Asignacion
Rule 23    Instruccion_Type -> Bloque
Rule 24    Instruccion_Type -> Asignacion_Conj
Rule 25    Instruccion_Type -> Condicion
Rule 26    Instruccion_Type -> Ciclo_For
Rule 27    Instruccion_Type -> Ciclo_Repeat1
Rule 28    Instruccion_Type -> Ciclo_Repeat2
Rule 29    Instruccion_Type -> Ciclo_Repeat3
Rule 30    Instruccion1 -> Instruccion_Type
Rule 31    Instruccion1 -> Printeo
Rule 32    Instruccion1 -> PrintLneo
Rule 33    Instruccion1 -> Scaneo
Rule 34    Instruccion2_Base -> Instruccion_Type Pto_Coma
Rule 35    Instruccion2_Base -> Printeo Pto_Coma
Rule 36    Instruccion2_Base -> PrintLneo Pto_Coma
Rule 37    Instruccion2_Base -> Scaneo Pto_Coma
Rule 38    Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma
Rule 39    Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma
Rule 40    Instruccion2 -> Instruccion2_Base
Rule 41    Instruccion2 -> Instruccion2 Instruccion2_Base
Rule 42    ListaVariables -> Aux_ListaVariables
Rule 43    ListaVariables -> ListaVariables Coma Aux_ListaVariables
Rule 44    Aux_ListaVariables -> id
Rule 45    Lista_Declaracion_Base -> Type ListaVariables Pto_Coma
Rule 46    Lista_Declaracion_Base -> Type id Equal Expresion Pto_Coma
Rule 47    Lista_Declaracion -> Lista_Declaracion_Base
Rule 48    Lista_Declaracion -> Lista_Declaracion Lista_Declaracion_Base
Rule 49    Declaracion -> Using Lista_Declaracion In
Rule 50    Declaracion -> Using In
Rule 51    Declaracion -> epsilon
Rule 52    Type -> Set
Rule 53    Type -> Bool
Rule 54    Type -> Int
Rule 55    Bloque -> Llave_Abre Declaracion Llave_Cierra
Rule 56    Bloque -> Llave_Abre Declaracion Instruccion2 Llave_Cierra
Rule 57    Cuerpo -> Instruccion1
Rule 58    Cuerpo -> Bloque
Rule 59    Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo
Rule 60    Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
Rule 61    Condicion_Else -> Else Cuerpo
Rule 62    Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo
Rule 63    Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
Rule 64    Condicion_Else_If -> Condicion_Else
Rule 65    Ciclo_For -> For id Direccion id Do Cuerpo
Rule 66    Ciclo_For -> For id Direccion Expresion Do Cuerpo
Rule 67    Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
Rule 68    Direccion -> Min
Rule 69    Direccion -> Max
Rule 70    Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
Rule 71    Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra Do Bloque
Rule 72    Ciclo_Repeat3 -> Repeat Bloque While Par_Abre Expresion Par_Cierra
Rule 73    Expresion -> Boolean
Rule 74    Expresion -> Numeros
Rule 75    Expresion -> id
Rule 76    Expresion -> Llave_Abre ListaNumeros Llave_Cierra
Rule 77    Expresion -> Llave_Abre Llave_Cierra
Rule 78    Expresion -> Par_Abre Expresion Par_Cierra
Rule 79    Expresion -> Not Expresion
Rule 80    Expresion -> Resta Expresion
Rule 81    Expresion -> MaxConj Expresion
Rule 82    Expresion -> MinConj Expresion
Rule 83    Expresion -> NumElemConj Expresion
Rule 84    Expresion -> Expresion Suma Expresion
Rule 85    Expresion -> Expresion Resta Expresion
Rule 86    Expresion -> Expresion Mult Expresion
Rule 87    Expresion -> Expresion Div Expresion
Rule 88    Expresion -> Expresion Mod Expresion
Rule 89    Expresion -> Expresion Union Expresion
Rule 90    Expresion -> Expresion Dif Expresion
Rule 91    Expresion -> Expresion Inter Expresion
Rule 92    Expresion -> Expresion SumaConj Expresion
Rule 93    Expresion -> Expresion Or Expresion
Rule 94    Expresion -> Expresion And Expresion
Rule 95    Expresion -> Expresion RestaConj Expresion
Rule 96    Expresion -> Expresion MultConj Expresion
Rule 97    Expresion -> Expresion DivConj Expresion
Rule 98    Expresion -> Expresion ModConj Expresion
Rule 99    Expresion -> Expresion Equiv Expresion
Rule 100   Expresion -> Expresion Greater Expresion
Rule 101   Expresion -> Expresion Less Expresion
Rule 102   Expresion -> Expresion GreaterEqual Expresion
Rule 103   Expresion -> Expresion LessEqual Expresion
Rule 104   Expresion -> Expresion IsInConj Expresion
Rule 105   Expresion -> Expresion NotEquiv Expresion

Terminals, with rules where they appear

And                  : 94
Bool                 : 53
Coma                 : 13 21 43
Dif                  : 90
Div                  : 87
DivConj              : 97
Do                   : 65 66 67 70 71
Else                 : 61
ElseIf               : 62 63
Equal                : 8 9 14 46
Equiv                : 99
False                : 3
For                  : 65 66 67
Greater              : 100
GreaterEqual         : 102
ID                   : 5
If                   : 59 60
In                   : 49 50
Int                  : 54
Inter                : 91
IsInConj             : 104
Less                 : 101
LessEqual            : 103
Llave_Abre           : 8 9 55 56 67 76 77
Llave_Cierra         : 8 9 55 56 67 76 77
Max                  : 69
MaxConj              : 81
Min                  : 68
MinConj              : 82
Mod                  : 88
ModConj              : 98
Mult                 : 86
MultConj             : 96
Not                  : 79
NotEquiv             : 105
NumElemConj          : 83
Number               : 7
Or                   : 93
Par_Abre             : 59 60 62 63 70 71 72 78
Par_Cierra           : 59 60 62 63 70 71 72 78
Print                : 17
PrintLn              : 16
Program              : 1
Pto_Coma             : 34 35 36 37 38 39 45 46
Repeat               : 70 72
Resta                : 80 85
RestaConj            : 95
Scan                 : 15
Set                  : 52
String               : 6
Suma                 : 84
SumaConj             : 92
True                 : 4
Union                : 89
Using                : 49 50
While                : 70 71 72
error                : 

Nonterminals, with rules where they appear

Asignacion           : 22
Asignacion_Conj      : 24
Aux_ListaNumeros     : 12 13
Aux_ListaVariables   : 42 43
Bloque               : 23 58 71 72
Boolean              : 73
Ciclo_For            : 26
Ciclo_Repeat1        : 27 39
Ciclo_Repeat2        : 28
Ciclo_Repeat3        : 29 38
Condicion            : 25
Condicion_Else       : 64
Condicion_Else_If    : 60 63
Cuerpo               : 1 59 60 61 62 63 65 66 67
Declaracion          : 55 56
Direccion            : 65 66 67
Expresion            : 11 14 19 46 59 60 62 63 66 70 71 72 78 79 80 81 82 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105
Instruccion1         : 57 70 70
Instruccion2         : 41 56
Instruccion2_Base    : 40 41
Instruccion_Type     : 30 34
ListaComa            : 16 17 21
ListaNumeros         : 9 13 67 76
ListaVariables       : 43 45
Lista_Declaracion    : 48 49
Lista_Declaracion_Base : 47 48
Numeros              : 10 74
PrintLneo            : 32 36
Printeo              : 31 35
Programa             : 0
Scaneo               : 33 37
Strings              : 18
TipoImpresion        : 20 21
Type                 : 45 46
epsilon              : 51
id                   : 8 9 14 15 44 46 65 65 66 67 75

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . Program Cuerpo

    Program         shift and go to state 1

    Programa                       shift and go to state 2

state 1

    (1) Programa -> Program . Cuerpo
    (57) Cuerpo -> . Instruccion1
    (58) Cuerpo -> . Bloque
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    id                             shift and go to state 7
    Printeo                        shift and go to state 9
    PrintLneo                      shift and go to state 10
    Cuerpo                         shift and go to state 11
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Instruccion1                   shift and go to state 24
    Bloque                         shift and go to state 25

state 2

    (0) S' -> Programa .



state 3

    (26) Instruccion_Type -> Ciclo_For .

    While           reduce using rule 26 (Instruccion_Type -> Ciclo_For .)
    Pto_Coma        reduce using rule 26 (Instruccion_Type -> Ciclo_For .)
    $end            reduce using rule 26 (Instruccion_Type -> Ciclo_For .)
    ElseIf          reduce using rule 26 (Instruccion_Type -> Ciclo_For .)
    Else            reduce using rule 26 (Instruccion_Type -> Ciclo_For .)


state 4

    (65) Ciclo_For -> For . id Direccion id Do Cuerpo
    (66) Ciclo_For -> For . id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> For . id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (5) id -> . ID

    ID              shift and go to state 20

    id                             shift and go to state 27

state 5

    (25) Instruccion_Type -> Condicion .

    While           reduce using rule 25 (Instruccion_Type -> Condicion .)
    Pto_Coma        reduce using rule 25 (Instruccion_Type -> Condicion .)
    $end            reduce using rule 25 (Instruccion_Type -> Condicion .)
    ElseIf          reduce using rule 25 (Instruccion_Type -> Condicion .)
    Else            reduce using rule 25 (Instruccion_Type -> Condicion .)


state 6

    (17) Printeo -> Print . ListaComa
    (20) ListaComa -> . TipoImpresion
    (21) ListaComa -> . ListaComa Coma TipoImpresion
    (18) TipoImpresion -> . Strings
    (19) TipoImpresion -> . Expresion
    (6) Strings -> . String
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    String          shift and go to state 33
    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 35
    Numeros                        shift and go to state 29
    TipoImpresion                  shift and go to state 36
    id                             shift and go to state 31
    ListaComa                      shift and go to state 38
    Boolean                        shift and go to state 45
    Strings                        shift and go to state 41

state 7

    (14) Asignacion -> id . Equal Expresion
    (8) Asignacion_Conj -> id . Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> id . Equal Llave_Abre ListaNumeros Llave_Cierra

    Equal           shift and go to state 46


state 8

    (70) Ciclo_Repeat1 -> Repeat . Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (72) Ciclo_Repeat3 -> Repeat . Bloque While Par_Abre Expresion Par_Cierra
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    id                             shift and go to state 7
    Printeo                        shift and go to state 9
    PrintLneo                      shift and go to state 10
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Instruccion1                   shift and go to state 47
    Bloque                         shift and go to state 48

state 9

    (31) Instruccion1 -> Printeo .

    ElseIf          reduce using rule 31 (Instruccion1 -> Printeo .)
    Else            reduce using rule 31 (Instruccion1 -> Printeo .)
    $end            reduce using rule 31 (Instruccion1 -> Printeo .)
    While           reduce using rule 31 (Instruccion1 -> Printeo .)
    Pto_Coma        reduce using rule 31 (Instruccion1 -> Printeo .)


state 10

    (32) Instruccion1 -> PrintLneo .

    ElseIf          reduce using rule 32 (Instruccion1 -> PrintLneo .)
    Else            reduce using rule 32 (Instruccion1 -> PrintLneo .)
    $end            reduce using rule 32 (Instruccion1 -> PrintLneo .)
    While           reduce using rule 32 (Instruccion1 -> PrintLneo .)
    Pto_Coma        reduce using rule 32 (Instruccion1 -> PrintLneo .)


state 11

    (1) Programa -> Program Cuerpo .

    $end            reduce using rule 1 (Programa -> Program Cuerpo .)


state 12

    (16) PrintLneo -> PrintLn . ListaComa
    (20) ListaComa -> . TipoImpresion
    (21) ListaComa -> . ListaComa Coma TipoImpresion
    (18) TipoImpresion -> . Strings
    (19) TipoImpresion -> . Expresion
    (6) Strings -> . String
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    String          shift and go to state 33
    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 35
    Numeros                        shift and go to state 29
    TipoImpresion                  shift and go to state 36
    id                             shift and go to state 31
    ListaComa                      shift and go to state 49
    Boolean                        shift and go to state 45
    Strings                        shift and go to state 41

state 13

    (29) Instruccion_Type -> Ciclo_Repeat3 .

    While           reduce using rule 29 (Instruccion_Type -> Ciclo_Repeat3 .)
    $end            reduce using rule 29 (Instruccion_Type -> Ciclo_Repeat3 .)
    ElseIf          reduce using rule 29 (Instruccion_Type -> Ciclo_Repeat3 .)
    Else            reduce using rule 29 (Instruccion_Type -> Ciclo_Repeat3 .)
    Pto_Coma        reduce using rule 29 (Instruccion_Type -> Ciclo_Repeat3 .)


state 14

    (28) Instruccion_Type -> Ciclo_Repeat2 .

    While           reduce using rule 28 (Instruccion_Type -> Ciclo_Repeat2 .)
    Pto_Coma        reduce using rule 28 (Instruccion_Type -> Ciclo_Repeat2 .)
    $end            reduce using rule 28 (Instruccion_Type -> Ciclo_Repeat2 .)
    ElseIf          reduce using rule 28 (Instruccion_Type -> Ciclo_Repeat2 .)
    Else            reduce using rule 28 (Instruccion_Type -> Ciclo_Repeat2 .)


state 15

    (27) Instruccion_Type -> Ciclo_Repeat1 .

    While           reduce using rule 27 (Instruccion_Type -> Ciclo_Repeat1 .)
    $end            reduce using rule 27 (Instruccion_Type -> Ciclo_Repeat1 .)
    ElseIf          reduce using rule 27 (Instruccion_Type -> Ciclo_Repeat1 .)
    Else            reduce using rule 27 (Instruccion_Type -> Ciclo_Repeat1 .)
    Pto_Coma        reduce using rule 27 (Instruccion_Type -> Ciclo_Repeat1 .)


state 16

    (22) Instruccion_Type -> Asignacion .

    While           reduce using rule 22 (Instruccion_Type -> Asignacion .)
    Pto_Coma        reduce using rule 22 (Instruccion_Type -> Asignacion .)
    $end            reduce using rule 22 (Instruccion_Type -> Asignacion .)
    ElseIf          reduce using rule 22 (Instruccion_Type -> Asignacion .)
    Else            reduce using rule 22 (Instruccion_Type -> Asignacion .)


state 17

    (33) Instruccion1 -> Scaneo .

    ElseIf          reduce using rule 33 (Instruccion1 -> Scaneo .)
    Else            reduce using rule 33 (Instruccion1 -> Scaneo .)
    $end            reduce using rule 33 (Instruccion1 -> Scaneo .)
    While           reduce using rule 33 (Instruccion1 -> Scaneo .)
    Pto_Coma        reduce using rule 33 (Instruccion1 -> Scaneo .)


state 18

    (55) Bloque -> Llave_Abre . Declaracion Llave_Cierra
    (56) Bloque -> Llave_Abre . Declaracion Instruccion2 Llave_Cierra
    (49) Declaracion -> . Using Lista_Declaracion In
    (50) Declaracion -> . Using In
    (51) Declaracion -> . epsilon
    (2) epsilon -> .

    Using           shift and go to state 51
    Llave_Cierra    reduce using rule 2 (epsilon -> .)
    Print           reduce using rule 2 (epsilon -> .)
    PrintLn         reduce using rule 2 (epsilon -> .)
    Scan            reduce using rule 2 (epsilon -> .)
    Repeat          reduce using rule 2 (epsilon -> .)
    Llave_Abre      reduce using rule 2 (epsilon -> .)
    If              reduce using rule 2 (epsilon -> .)
    For             reduce using rule 2 (epsilon -> .)
    While           reduce using rule 2 (epsilon -> .)
    ID              reduce using rule 2 (epsilon -> .)

    epsilon                        shift and go to state 50
    Declaracion                    shift and go to state 52

state 19

    (71) Ciclo_Repeat2 -> While . Par_Abre Expresion Par_Cierra Do Bloque

    Par_Abre        shift and go to state 53


state 20

    (5) id -> ID .

    Suma            reduce using rule 5 (id -> ID .)
    Resta           reduce using rule 5 (id -> ID .)
    Mult            reduce using rule 5 (id -> ID .)
    Div             reduce using rule 5 (id -> ID .)
    Mod             reduce using rule 5 (id -> ID .)
    Union           reduce using rule 5 (id -> ID .)
    Dif             reduce using rule 5 (id -> ID .)
    Inter           reduce using rule 5 (id -> ID .)
    SumaConj        reduce using rule 5 (id -> ID .)
    Or              reduce using rule 5 (id -> ID .)
    And             reduce using rule 5 (id -> ID .)
    RestaConj       reduce using rule 5 (id -> ID .)
    MultConj        reduce using rule 5 (id -> ID .)
    DivConj         reduce using rule 5 (id -> ID .)
    ModConj         reduce using rule 5 (id -> ID .)
    Equiv           reduce using rule 5 (id -> ID .)
    Greater         reduce using rule 5 (id -> ID .)
    Less            reduce using rule 5 (id -> ID .)
    GreaterEqual    reduce using rule 5 (id -> ID .)
    LessEqual       reduce using rule 5 (id -> ID .)
    IsInConj        reduce using rule 5 (id -> ID .)
    NotEquiv        reduce using rule 5 (id -> ID .)
    Coma            reduce using rule 5 (id -> ID .)
    $end            reduce using rule 5 (id -> ID .)
    While           reduce using rule 5 (id -> ID .)
    Pto_Coma        reduce using rule 5 (id -> ID .)
    ElseIf          reduce using rule 5 (id -> ID .)
    Else            reduce using rule 5 (id -> ID .)
    Par_Cierra      reduce using rule 5 (id -> ID .)
    Llave_Cierra    reduce using rule 5 (id -> ID .)
    Do              reduce using rule 5 (id -> ID .)
    Equal           reduce using rule 5 (id -> ID .)
    Min             reduce using rule 5 (id -> ID .)
    Max             reduce using rule 5 (id -> ID .)


state 21

    (30) Instruccion1 -> Instruccion_Type .

    ElseIf          reduce using rule 30 (Instruccion1 -> Instruccion_Type .)
    Else            reduce using rule 30 (Instruccion1 -> Instruccion_Type .)
    $end            reduce using rule 30 (Instruccion1 -> Instruccion_Type .)
    While           reduce using rule 30 (Instruccion1 -> Instruccion_Type .)
    Pto_Coma        reduce using rule 30 (Instruccion1 -> Instruccion_Type .)


state 22

    (15) Scaneo -> Scan . id
    (5) id -> . ID

    ID              shift and go to state 20

    id                             shift and go to state 54

state 23

    (24) Instruccion_Type -> Asignacion_Conj .

    While           reduce using rule 24 (Instruccion_Type -> Asignacion_Conj .)
    Pto_Coma        reduce using rule 24 (Instruccion_Type -> Asignacion_Conj .)
    $end            reduce using rule 24 (Instruccion_Type -> Asignacion_Conj .)
    ElseIf          reduce using rule 24 (Instruccion_Type -> Asignacion_Conj .)
    Else            reduce using rule 24 (Instruccion_Type -> Asignacion_Conj .)


state 24

    (57) Cuerpo -> Instruccion1 .

    ElseIf          reduce using rule 57 (Cuerpo -> Instruccion1 .)
    Else            reduce using rule 57 (Cuerpo -> Instruccion1 .)
    $end            reduce using rule 57 (Cuerpo -> Instruccion1 .)
    While           reduce using rule 57 (Cuerpo -> Instruccion1 .)
    Pto_Coma        reduce using rule 57 (Cuerpo -> Instruccion1 .)


state 25

    (58) Cuerpo -> Bloque .
    (23) Instruccion_Type -> Bloque .

  ! reduce/reduce conflict for $end resolved using rule 23 (Instruccion_Type -> Bloque .)
  ! reduce/reduce conflict for ElseIf resolved using rule 23 (Instruccion_Type -> Bloque .)
  ! reduce/reduce conflict for Else resolved using rule 23 (Instruccion_Type -> Bloque .)
  ! reduce/reduce conflict for While resolved using rule 23 (Instruccion_Type -> Bloque .)
  ! reduce/reduce conflict for Pto_Coma resolved using rule 23 (Instruccion_Type -> Bloque .)
    $end            reduce using rule 23 (Instruccion_Type -> Bloque .)
    ElseIf          reduce using rule 23 (Instruccion_Type -> Bloque .)
    Else            reduce using rule 23 (Instruccion_Type -> Bloque .)
    While           reduce using rule 23 (Instruccion_Type -> Bloque .)
    Pto_Coma        reduce using rule 23 (Instruccion_Type -> Bloque .)

  ! ElseIf          [ reduce using rule 58 (Cuerpo -> Bloque .) ]
  ! Else            [ reduce using rule 58 (Cuerpo -> Bloque .) ]
  ! $end            [ reduce using rule 58 (Cuerpo -> Bloque .) ]
  ! While           [ reduce using rule 58 (Cuerpo -> Bloque .) ]
  ! Pto_Coma        [ reduce using rule 58 (Cuerpo -> Bloque .) ]


state 26

    (59) Condicion -> If . Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> If . Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If

    Par_Abre        shift and go to state 55


state 27

    (65) Ciclo_For -> For id . Direccion id Do Cuerpo
    (66) Ciclo_For -> For id . Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> For id . Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (68) Direccion -> . Min
    (69) Direccion -> . Max

    Min             shift and go to state 56
    Max             shift and go to state 57

    Direccion                      shift and go to state 58

state 28

    (78) Expresion -> Par_Abre . Expresion Par_Cierra
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 59
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 29

    (74) Expresion -> Numeros .

    Suma            reduce using rule 74 (Expresion -> Numeros .)
    Resta           reduce using rule 74 (Expresion -> Numeros .)
    Mult            reduce using rule 74 (Expresion -> Numeros .)
    Div             reduce using rule 74 (Expresion -> Numeros .)
    Mod             reduce using rule 74 (Expresion -> Numeros .)
    Union           reduce using rule 74 (Expresion -> Numeros .)
    Dif             reduce using rule 74 (Expresion -> Numeros .)
    Inter           reduce using rule 74 (Expresion -> Numeros .)
    SumaConj        reduce using rule 74 (Expresion -> Numeros .)
    Or              reduce using rule 74 (Expresion -> Numeros .)
    And             reduce using rule 74 (Expresion -> Numeros .)
    RestaConj       reduce using rule 74 (Expresion -> Numeros .)
    MultConj        reduce using rule 74 (Expresion -> Numeros .)
    DivConj         reduce using rule 74 (Expresion -> Numeros .)
    ModConj         reduce using rule 74 (Expresion -> Numeros .)
    Equiv           reduce using rule 74 (Expresion -> Numeros .)
    Greater         reduce using rule 74 (Expresion -> Numeros .)
    Less            reduce using rule 74 (Expresion -> Numeros .)
    GreaterEqual    reduce using rule 74 (Expresion -> Numeros .)
    LessEqual       reduce using rule 74 (Expresion -> Numeros .)
    IsInConj        reduce using rule 74 (Expresion -> Numeros .)
    NotEquiv        reduce using rule 74 (Expresion -> Numeros .)
    Coma            reduce using rule 74 (Expresion -> Numeros .)
    $end            reduce using rule 74 (Expresion -> Numeros .)
    While           reduce using rule 74 (Expresion -> Numeros .)
    Pto_Coma        reduce using rule 74 (Expresion -> Numeros .)
    ElseIf          reduce using rule 74 (Expresion -> Numeros .)
    Else            reduce using rule 74 (Expresion -> Numeros .)
    Par_Cierra      reduce using rule 74 (Expresion -> Numeros .)
    Llave_Cierra    reduce using rule 74 (Expresion -> Numeros .)
    Do              reduce using rule 74 (Expresion -> Numeros .)


state 30

    (82) Expresion -> MinConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 60
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 31

    (75) Expresion -> id .

    Suma            reduce using rule 75 (Expresion -> id .)
    Resta           reduce using rule 75 (Expresion -> id .)
    Mult            reduce using rule 75 (Expresion -> id .)
    Div             reduce using rule 75 (Expresion -> id .)
    Mod             reduce using rule 75 (Expresion -> id .)
    Union           reduce using rule 75 (Expresion -> id .)
    Dif             reduce using rule 75 (Expresion -> id .)
    Inter           reduce using rule 75 (Expresion -> id .)
    SumaConj        reduce using rule 75 (Expresion -> id .)
    Or              reduce using rule 75 (Expresion -> id .)
    And             reduce using rule 75 (Expresion -> id .)
    RestaConj       reduce using rule 75 (Expresion -> id .)
    MultConj        reduce using rule 75 (Expresion -> id .)
    DivConj         reduce using rule 75 (Expresion -> id .)
    ModConj         reduce using rule 75 (Expresion -> id .)
    Equiv           reduce using rule 75 (Expresion -> id .)
    Greater         reduce using rule 75 (Expresion -> id .)
    Less            reduce using rule 75 (Expresion -> id .)
    GreaterEqual    reduce using rule 75 (Expresion -> id .)
    LessEqual       reduce using rule 75 (Expresion -> id .)
    IsInConj        reduce using rule 75 (Expresion -> id .)
    NotEquiv        reduce using rule 75 (Expresion -> id .)
    Coma            reduce using rule 75 (Expresion -> id .)
    $end            reduce using rule 75 (Expresion -> id .)
    While           reduce using rule 75 (Expresion -> id .)
    Pto_Coma        reduce using rule 75 (Expresion -> id .)
    ElseIf          reduce using rule 75 (Expresion -> id .)
    Else            reduce using rule 75 (Expresion -> id .)
    Par_Cierra      reduce using rule 75 (Expresion -> id .)
    Llave_Cierra    reduce using rule 75 (Expresion -> id .)
    Do              reduce using rule 75 (Expresion -> id .)


state 32

    (81) Expresion -> MaxConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 61
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 33

    (6) Strings -> String .

    Coma            reduce using rule 6 (Strings -> String .)
    $end            reduce using rule 6 (Strings -> String .)
    While           reduce using rule 6 (Strings -> String .)
    Pto_Coma        reduce using rule 6 (Strings -> String .)
    ElseIf          reduce using rule 6 (Strings -> String .)
    Else            reduce using rule 6 (Strings -> String .)


state 34

    (4) Boolean -> True .

    Suma            reduce using rule 4 (Boolean -> True .)
    Resta           reduce using rule 4 (Boolean -> True .)
    Mult            reduce using rule 4 (Boolean -> True .)
    Div             reduce using rule 4 (Boolean -> True .)
    Mod             reduce using rule 4 (Boolean -> True .)
    Union           reduce using rule 4 (Boolean -> True .)
    Dif             reduce using rule 4 (Boolean -> True .)
    Inter           reduce using rule 4 (Boolean -> True .)
    SumaConj        reduce using rule 4 (Boolean -> True .)
    Or              reduce using rule 4 (Boolean -> True .)
    And             reduce using rule 4 (Boolean -> True .)
    RestaConj       reduce using rule 4 (Boolean -> True .)
    MultConj        reduce using rule 4 (Boolean -> True .)
    DivConj         reduce using rule 4 (Boolean -> True .)
    ModConj         reduce using rule 4 (Boolean -> True .)
    Equiv           reduce using rule 4 (Boolean -> True .)
    Greater         reduce using rule 4 (Boolean -> True .)
    Less            reduce using rule 4 (Boolean -> True .)
    GreaterEqual    reduce using rule 4 (Boolean -> True .)
    LessEqual       reduce using rule 4 (Boolean -> True .)
    IsInConj        reduce using rule 4 (Boolean -> True .)
    NotEquiv        reduce using rule 4 (Boolean -> True .)
    Coma            reduce using rule 4 (Boolean -> True .)
    $end            reduce using rule 4 (Boolean -> True .)
    While           reduce using rule 4 (Boolean -> True .)
    Pto_Coma        reduce using rule 4 (Boolean -> True .)
    ElseIf          reduce using rule 4 (Boolean -> True .)
    Else            reduce using rule 4 (Boolean -> True .)
    Par_Cierra      reduce using rule 4 (Boolean -> True .)
    Llave_Cierra    reduce using rule 4 (Boolean -> True .)
    Do              reduce using rule 4 (Boolean -> True .)


state 35

    (19) TipoImpresion -> Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Coma            reduce using rule 19 (TipoImpresion -> Expresion .)
    $end            reduce using rule 19 (TipoImpresion -> Expresion .)
    While           reduce using rule 19 (TipoImpresion -> Expresion .)
    Pto_Coma        reduce using rule 19 (TipoImpresion -> Expresion .)
    ElseIf          reduce using rule 19 (TipoImpresion -> Expresion .)
    Else            reduce using rule 19 (TipoImpresion -> Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 36

    (20) ListaComa -> TipoImpresion .

    Coma            reduce using rule 20 (ListaComa -> TipoImpresion .)
    $end            reduce using rule 20 (ListaComa -> TipoImpresion .)
    While           reduce using rule 20 (ListaComa -> TipoImpresion .)
    Pto_Coma        reduce using rule 20 (ListaComa -> TipoImpresion .)
    ElseIf          reduce using rule 20 (ListaComa -> TipoImpresion .)
    Else            reduce using rule 20 (ListaComa -> TipoImpresion .)


state 37

    (76) Expresion -> Llave_Abre . ListaNumeros Llave_Cierra
    (77) Expresion -> Llave_Abre . Llave_Cierra
    (12) ListaNumeros -> . Aux_ListaNumeros
    (13) ListaNumeros -> . ListaNumeros Coma Aux_ListaNumeros
    (10) Aux_ListaNumeros -> . Numeros
    (11) Aux_ListaNumeros -> . Expresion
    (7) Numeros -> . Number
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (5) id -> . ID

    Llave_Cierra    shift and go to state 86
    Number          shift and go to state 44
    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    ID              shift and go to state 20

    Expresion                      shift and go to state 87
    Numeros                        shift and go to state 84
    Boolean                        shift and go to state 45
    ListaNumeros                   shift and go to state 88
    Aux_ListaNumeros               shift and go to state 85
    id                             shift and go to state 31

state 38

    (17) Printeo -> Print ListaComa .
    (21) ListaComa -> ListaComa . Coma TipoImpresion

    ElseIf          reduce using rule 17 (Printeo -> Print ListaComa .)
    Else            reduce using rule 17 (Printeo -> Print ListaComa .)
    $end            reduce using rule 17 (Printeo -> Print ListaComa .)
    While           reduce using rule 17 (Printeo -> Print ListaComa .)
    Pto_Coma        reduce using rule 17 (Printeo -> Print ListaComa .)
    Coma            shift and go to state 89


state 39

    (79) Expresion -> Not . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 90
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 40

    (80) Expresion -> Resta . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 91
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 41

    (18) TipoImpresion -> Strings .

    Coma            reduce using rule 18 (TipoImpresion -> Strings .)
    $end            reduce using rule 18 (TipoImpresion -> Strings .)
    While           reduce using rule 18 (TipoImpresion -> Strings .)
    Pto_Coma        reduce using rule 18 (TipoImpresion -> Strings .)
    ElseIf          reduce using rule 18 (TipoImpresion -> Strings .)
    Else            reduce using rule 18 (TipoImpresion -> Strings .)


state 42

    (83) Expresion -> NumElemConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 92
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 43

    (3) Boolean -> False .

    Suma            reduce using rule 3 (Boolean -> False .)
    Resta           reduce using rule 3 (Boolean -> False .)
    Mult            reduce using rule 3 (Boolean -> False .)
    Div             reduce using rule 3 (Boolean -> False .)
    Mod             reduce using rule 3 (Boolean -> False .)
    Union           reduce using rule 3 (Boolean -> False .)
    Dif             reduce using rule 3 (Boolean -> False .)
    Inter           reduce using rule 3 (Boolean -> False .)
    SumaConj        reduce using rule 3 (Boolean -> False .)
    Or              reduce using rule 3 (Boolean -> False .)
    And             reduce using rule 3 (Boolean -> False .)
    RestaConj       reduce using rule 3 (Boolean -> False .)
    MultConj        reduce using rule 3 (Boolean -> False .)
    DivConj         reduce using rule 3 (Boolean -> False .)
    ModConj         reduce using rule 3 (Boolean -> False .)
    Equiv           reduce using rule 3 (Boolean -> False .)
    Greater         reduce using rule 3 (Boolean -> False .)
    Less            reduce using rule 3 (Boolean -> False .)
    GreaterEqual    reduce using rule 3 (Boolean -> False .)
    LessEqual       reduce using rule 3 (Boolean -> False .)
    IsInConj        reduce using rule 3 (Boolean -> False .)
    NotEquiv        reduce using rule 3 (Boolean -> False .)
    Coma            reduce using rule 3 (Boolean -> False .)
    $end            reduce using rule 3 (Boolean -> False .)
    While           reduce using rule 3 (Boolean -> False .)
    Pto_Coma        reduce using rule 3 (Boolean -> False .)
    ElseIf          reduce using rule 3 (Boolean -> False .)
    Else            reduce using rule 3 (Boolean -> False .)
    Par_Cierra      reduce using rule 3 (Boolean -> False .)
    Llave_Cierra    reduce using rule 3 (Boolean -> False .)
    Do              reduce using rule 3 (Boolean -> False .)


state 44

    (7) Numeros -> Number .

    Suma            reduce using rule 7 (Numeros -> Number .)
    Resta           reduce using rule 7 (Numeros -> Number .)
    Mult            reduce using rule 7 (Numeros -> Number .)
    Div             reduce using rule 7 (Numeros -> Number .)
    Mod             reduce using rule 7 (Numeros -> Number .)
    Union           reduce using rule 7 (Numeros -> Number .)
    Dif             reduce using rule 7 (Numeros -> Number .)
    Inter           reduce using rule 7 (Numeros -> Number .)
    SumaConj        reduce using rule 7 (Numeros -> Number .)
    Or              reduce using rule 7 (Numeros -> Number .)
    And             reduce using rule 7 (Numeros -> Number .)
    RestaConj       reduce using rule 7 (Numeros -> Number .)
    MultConj        reduce using rule 7 (Numeros -> Number .)
    DivConj         reduce using rule 7 (Numeros -> Number .)
    ModConj         reduce using rule 7 (Numeros -> Number .)
    Equiv           reduce using rule 7 (Numeros -> Number .)
    Greater         reduce using rule 7 (Numeros -> Number .)
    Less            reduce using rule 7 (Numeros -> Number .)
    GreaterEqual    reduce using rule 7 (Numeros -> Number .)
    LessEqual       reduce using rule 7 (Numeros -> Number .)
    IsInConj        reduce using rule 7 (Numeros -> Number .)
    NotEquiv        reduce using rule 7 (Numeros -> Number .)
    $end            reduce using rule 7 (Numeros -> Number .)
    While           reduce using rule 7 (Numeros -> Number .)
    Pto_Coma        reduce using rule 7 (Numeros -> Number .)
    ElseIf          reduce using rule 7 (Numeros -> Number .)
    Else            reduce using rule 7 (Numeros -> Number .)
    Coma            reduce using rule 7 (Numeros -> Number .)
    Par_Cierra      reduce using rule 7 (Numeros -> Number .)
    Llave_Cierra    reduce using rule 7 (Numeros -> Number .)
    Do              reduce using rule 7 (Numeros -> Number .)


state 45

    (73) Expresion -> Boolean .

    Suma            reduce using rule 73 (Expresion -> Boolean .)
    Resta           reduce using rule 73 (Expresion -> Boolean .)
    Mult            reduce using rule 73 (Expresion -> Boolean .)
    Div             reduce using rule 73 (Expresion -> Boolean .)
    Mod             reduce using rule 73 (Expresion -> Boolean .)
    Union           reduce using rule 73 (Expresion -> Boolean .)
    Dif             reduce using rule 73 (Expresion -> Boolean .)
    Inter           reduce using rule 73 (Expresion -> Boolean .)
    SumaConj        reduce using rule 73 (Expresion -> Boolean .)
    Or              reduce using rule 73 (Expresion -> Boolean .)
    And             reduce using rule 73 (Expresion -> Boolean .)
    RestaConj       reduce using rule 73 (Expresion -> Boolean .)
    MultConj        reduce using rule 73 (Expresion -> Boolean .)
    DivConj         reduce using rule 73 (Expresion -> Boolean .)
    ModConj         reduce using rule 73 (Expresion -> Boolean .)
    Equiv           reduce using rule 73 (Expresion -> Boolean .)
    Greater         reduce using rule 73 (Expresion -> Boolean .)
    Less            reduce using rule 73 (Expresion -> Boolean .)
    GreaterEqual    reduce using rule 73 (Expresion -> Boolean .)
    LessEqual       reduce using rule 73 (Expresion -> Boolean .)
    IsInConj        reduce using rule 73 (Expresion -> Boolean .)
    NotEquiv        reduce using rule 73 (Expresion -> Boolean .)
    Coma            reduce using rule 73 (Expresion -> Boolean .)
    $end            reduce using rule 73 (Expresion -> Boolean .)
    While           reduce using rule 73 (Expresion -> Boolean .)
    Pto_Coma        reduce using rule 73 (Expresion -> Boolean .)
    ElseIf          reduce using rule 73 (Expresion -> Boolean .)
    Else            reduce using rule 73 (Expresion -> Boolean .)
    Par_Cierra      reduce using rule 73 (Expresion -> Boolean .)
    Llave_Cierra    reduce using rule 73 (Expresion -> Boolean .)
    Do              reduce using rule 73 (Expresion -> Boolean .)


state 46

    (14) Asignacion -> id Equal . Expresion
    (8) Asignacion_Conj -> id Equal . Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> id Equal . Llave_Abre ListaNumeros Llave_Cierra
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 94
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 93
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 47

    (70) Ciclo_Repeat1 -> Repeat Instruccion1 . While Par_Abre Expresion Par_Cierra Do Instruccion1

    While           shift and go to state 95


state 48

    (72) Ciclo_Repeat3 -> Repeat Bloque . While Par_Abre Expresion Par_Cierra
    (23) Instruccion_Type -> Bloque .

  ! shift/reduce conflict for While resolved as shift
    While           shift and go to state 96

  ! While           [ reduce using rule 23 (Instruccion_Type -> Bloque .) ]


state 49

    (16) PrintLneo -> PrintLn ListaComa .
    (21) ListaComa -> ListaComa . Coma TipoImpresion

    ElseIf          reduce using rule 16 (PrintLneo -> PrintLn ListaComa .)
    Else            reduce using rule 16 (PrintLneo -> PrintLn ListaComa .)
    $end            reduce using rule 16 (PrintLneo -> PrintLn ListaComa .)
    While           reduce using rule 16 (PrintLneo -> PrintLn ListaComa .)
    Pto_Coma        reduce using rule 16 (PrintLneo -> PrintLn ListaComa .)
    Coma            shift and go to state 89


state 50

    (51) Declaracion -> epsilon .

    Llave_Cierra    reduce using rule 51 (Declaracion -> epsilon .)
    Print           reduce using rule 51 (Declaracion -> epsilon .)
    PrintLn         reduce using rule 51 (Declaracion -> epsilon .)
    Scan            reduce using rule 51 (Declaracion -> epsilon .)
    Repeat          reduce using rule 51 (Declaracion -> epsilon .)
    Llave_Abre      reduce using rule 51 (Declaracion -> epsilon .)
    If              reduce using rule 51 (Declaracion -> epsilon .)
    For             reduce using rule 51 (Declaracion -> epsilon .)
    While           reduce using rule 51 (Declaracion -> epsilon .)
    ID              reduce using rule 51 (Declaracion -> epsilon .)


state 51

    (49) Declaracion -> Using . Lista_Declaracion In
    (50) Declaracion -> Using . In
    (47) Lista_Declaracion -> . Lista_Declaracion_Base
    (48) Lista_Declaracion -> . Lista_Declaracion Lista_Declaracion_Base
    (45) Lista_Declaracion_Base -> . Type ListaVariables Pto_Coma
    (46) Lista_Declaracion_Base -> . Type id Equal Expresion Pto_Coma
    (52) Type -> . Set
    (53) Type -> . Bool
    (54) Type -> . Int

    In              shift and go to state 101
    Set             shift and go to state 97
    Bool            shift and go to state 100
    Int             shift and go to state 99

    Lista_Declaracion_Base         shift and go to state 98
    Lista_Declaracion              shift and go to state 102
    Type                           shift and go to state 103

state 52

    (55) Bloque -> Llave_Abre Declaracion . Llave_Cierra
    (56) Bloque -> Llave_Abre Declaracion . Instruccion2 Llave_Cierra
    (40) Instruccion2 -> . Instruccion2_Base
    (41) Instruccion2 -> . Instruccion2 Instruccion2_Base
    (34) Instruccion2_Base -> . Instruccion_Type Pto_Coma
    (35) Instruccion2_Base -> . Printeo Pto_Coma
    (36) Instruccion2_Base -> . PrintLneo Pto_Coma
    (37) Instruccion2_Base -> . Scaneo Pto_Coma
    (38) Instruccion2_Base -> . Ciclo_Repeat3 Pto_Coma
    (39) Instruccion2_Base -> . Ciclo_Repeat1 Pto_Coma
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (14) Asignacion -> . id Equal Expresion
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (5) id -> . ID

    Llave_Cierra    shift and go to state 104
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    Repeat          shift and go to state 105
    Llave_Abre      shift and go to state 18
    If              shift and go to state 26
    For             shift and go to state 4
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    id                             shift and go to state 7
    Instruccion2_Base              shift and go to state 106
    PrintLneo                      shift and go to state 107
    Ciclo_Repeat3                  shift and go to state 108
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 109
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 110
    Instruccion_Type               shift and go to state 111
    Asignacion_Conj                shift and go to state 23
    Instruccion2                   shift and go to state 112
    Printeo                        shift and go to state 113
    Bloque                         shift and go to state 114

state 53

    (71) Ciclo_Repeat2 -> While Par_Abre . Expresion Par_Cierra Do Bloque
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 115
    Numeros                        shift and go to state 29
    Boolean                        shift and go to state 45
    id                             shift and go to state 31

state 54

    (15) Scaneo -> Scan id .

    ElseIf          reduce using rule 15 (Scaneo -> Scan id .)
    Else            reduce using rule 15 (Scaneo -> Scan id .)
    $end            reduce using rule 15 (Scaneo -> Scan id .)
    While           reduce using rule 15 (Scaneo -> Scan id .)
    Pto_Coma        reduce using rule 15 (Scaneo -> Scan id .)


state 55

    (59) Condicion -> If Par_Abre . Expresion Par_Cierra Cuerpo
    (60) Condicion -> If Par_Abre . Expresion Par_Cierra Cuerpo Condicion_Else_If
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 116
    Numeros                        shift and go to state 29
    Boolean                        shift and go to state 45
    id                             shift and go to state 31

state 56

    (68) Direccion -> Min .

    Llave_Abre      reduce using rule 68 (Direccion -> Min .)
    ID              reduce using rule 68 (Direccion -> Min .)
    Par_Abre        reduce using rule 68 (Direccion -> Min .)
    Not             reduce using rule 68 (Direccion -> Min .)
    Resta           reduce using rule 68 (Direccion -> Min .)
    MaxConj         reduce using rule 68 (Direccion -> Min .)
    MinConj         reduce using rule 68 (Direccion -> Min .)
    NumElemConj     reduce using rule 68 (Direccion -> Min .)
    False           reduce using rule 68 (Direccion -> Min .)
    True            reduce using rule 68 (Direccion -> Min .)
    Number          reduce using rule 68 (Direccion -> Min .)


state 57

    (69) Direccion -> Max .

    Llave_Abre      reduce using rule 69 (Direccion -> Max .)
    ID              reduce using rule 69 (Direccion -> Max .)
    Par_Abre        reduce using rule 69 (Direccion -> Max .)
    Not             reduce using rule 69 (Direccion -> Max .)
    Resta           reduce using rule 69 (Direccion -> Max .)
    MaxConj         reduce using rule 69 (Direccion -> Max .)
    MinConj         reduce using rule 69 (Direccion -> Max .)
    NumElemConj     reduce using rule 69 (Direccion -> Max .)
    False           reduce using rule 69 (Direccion -> Max .)
    True            reduce using rule 69 (Direccion -> Max .)
    Number          reduce using rule 69 (Direccion -> Max .)


state 58

    (65) Ciclo_For -> For id Direccion . id Do Cuerpo
    (66) Ciclo_For -> For id Direccion . Expresion Do Cuerpo
    (67) Ciclo_For -> For id Direccion . Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (5) id -> . ID
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number

    Llave_Abre      shift and go to state 119
    ID              shift and go to state 20
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44

    Expresion                      shift and go to state 118
    Numeros                        shift and go to state 29
    Boolean                        shift and go to state 45
    id                             shift and go to state 117

state 59

    (78) Expresion -> Par_Abre Expresion . Par_Cierra
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Par_Cierra      shift and go to state 120
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 60

    (82) Expresion -> MinConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 82 (Expresion -> MinConj Expresion .)
    Resta           reduce using rule 82 (Expresion -> MinConj Expresion .)
    Mult            reduce using rule 82 (Expresion -> MinConj Expresion .)
    Div             reduce using rule 82 (Expresion -> MinConj Expresion .)
    Mod             reduce using rule 82 (Expresion -> MinConj Expresion .)
    Union           reduce using rule 82 (Expresion -> MinConj Expresion .)
    Dif             reduce using rule 82 (Expresion -> MinConj Expresion .)
    Inter           reduce using rule 82 (Expresion -> MinConj Expresion .)
    SumaConj        reduce using rule 82 (Expresion -> MinConj Expresion .)
    Or              reduce using rule 82 (Expresion -> MinConj Expresion .)
    And             reduce using rule 82 (Expresion -> MinConj Expresion .)
    RestaConj       reduce using rule 82 (Expresion -> MinConj Expresion .)
    MultConj        reduce using rule 82 (Expresion -> MinConj Expresion .)
    DivConj         reduce using rule 82 (Expresion -> MinConj Expresion .)
    ModConj         reduce using rule 82 (Expresion -> MinConj Expresion .)
    Equiv           reduce using rule 82 (Expresion -> MinConj Expresion .)
    Greater         reduce using rule 82 (Expresion -> MinConj Expresion .)
    Less            reduce using rule 82 (Expresion -> MinConj Expresion .)
    GreaterEqual    reduce using rule 82 (Expresion -> MinConj Expresion .)
    LessEqual       reduce using rule 82 (Expresion -> MinConj Expresion .)
    IsInConj        reduce using rule 82 (Expresion -> MinConj Expresion .)
    NotEquiv        reduce using rule 82 (Expresion -> MinConj Expresion .)
    Coma            reduce using rule 82 (Expresion -> MinConj Expresion .)
    $end            reduce using rule 82 (Expresion -> MinConj Expresion .)
    While           reduce using rule 82 (Expresion -> MinConj Expresion .)
    Pto_Coma        reduce using rule 82 (Expresion -> MinConj Expresion .)
    ElseIf          reduce using rule 82 (Expresion -> MinConj Expresion .)
    Else            reduce using rule 82 (Expresion -> MinConj Expresion .)
    Par_Cierra      reduce using rule 82 (Expresion -> MinConj Expresion .)
    Llave_Cierra    reduce using rule 82 (Expresion -> MinConj Expresion .)
    Do              reduce using rule 82 (Expresion -> MinConj Expresion .)

  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! SumaConj        [ shift and go to state 78 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! RestaConj       [ shift and go to state 67 ]
  ! MultConj        [ shift and go to state 72 ]
  ! DivConj         [ shift and go to state 74 ]
  ! ModConj         [ shift and go to state 82 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 61

    (81) Expresion -> MaxConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Resta           reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Mult            reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Div             reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Mod             reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Union           reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Dif             reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Inter           reduce using rule 81 (Expresion -> MaxConj Expresion .)
    SumaConj        reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Or              reduce using rule 81 (Expresion -> MaxConj Expresion .)
    And             reduce using rule 81 (Expresion -> MaxConj Expresion .)
    RestaConj       reduce using rule 81 (Expresion -> MaxConj Expresion .)
    MultConj        reduce using rule 81 (Expresion -> MaxConj Expresion .)
    DivConj         reduce using rule 81 (Expresion -> MaxConj Expresion .)
    ModConj         reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Equiv           reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Greater         reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Less            reduce using rule 81 (Expresion -> MaxConj Expresion .)
    GreaterEqual    reduce using rule 81 (Expresion -> MaxConj Expresion .)
    LessEqual       reduce using rule 81 (Expresion -> MaxConj Expresion .)
    IsInConj        reduce using rule 81 (Expresion -> MaxConj Expresion .)
    NotEquiv        reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Coma            reduce using rule 81 (Expresion -> MaxConj Expresion .)
    $end            reduce using rule 81 (Expresion -> MaxConj Expresion .)
    While           reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Pto_Coma        reduce using rule 81 (Expresion -> MaxConj Expresion .)
    ElseIf          reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Else            reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Par_Cierra      reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Llave_Cierra    reduce using rule 81 (Expresion -> MaxConj Expresion .)
    Do              reduce using rule 81 (Expresion -> MaxConj Expresion .)

  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! SumaConj        [ shift and go to state 78 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! RestaConj       [ shift and go to state 67 ]
  ! MultConj        [ shift and go to state 72 ]
  ! DivConj         [ shift and go to state 74 ]
  ! ModConj         [ shift and go to state 82 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 62

    (105) Expresion -> Expresion NotEquiv . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 121
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 63

    (104) Expresion -> Expresion IsInConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 122
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 64

    (89) Expresion -> Expresion Union . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 123
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 65

    (87) Expresion -> Expresion Div . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 124
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 66

    (100) Expresion -> Expresion Greater . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 125
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 67

    (95) Expresion -> Expresion RestaConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 126
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 68

    (94) Expresion -> Expresion And . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 127
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 69

    (103) Expresion -> Expresion LessEqual . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 128
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 70

    (84) Expresion -> Expresion Suma . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 129
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 71

    (88) Expresion -> Expresion Mod . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 130
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 72

    (96) Expresion -> Expresion MultConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 131
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 73

    (90) Expresion -> Expresion Dif . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 132
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 74

    (97) Expresion -> Expresion DivConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 133
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 75

    (85) Expresion -> Expresion Resta . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 134
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 76

    (91) Expresion -> Expresion Inter . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 135
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 77

    (93) Expresion -> Expresion Or . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 136
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 78

    (92) Expresion -> Expresion SumaConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 137
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 79

    (102) Expresion -> Expresion GreaterEqual . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 138
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 80

    (101) Expresion -> Expresion Less . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 139
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 81

    (86) Expresion -> Expresion Mult . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 140
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 82

    (98) Expresion -> Expresion ModConj . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 141
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 83

    (99) Expresion -> Expresion Equiv . Expresion
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 142
    Boolean                        shift and go to state 45
    Numeros                        shift and go to state 29
    id                             shift and go to state 31

state 84

    (10) Aux_ListaNumeros -> Numeros .
    (74) Expresion -> Numeros .

  ! reduce/reduce conflict for Llave_Cierra resolved using rule 10 (Aux_ListaNumeros -> Numeros .)
  ! reduce/reduce conflict for Coma resolved using rule 10 (Aux_ListaNumeros -> Numeros .)
    Llave_Cierra    reduce using rule 10 (Aux_ListaNumeros -> Numeros .)
    Coma            reduce using rule 10 (Aux_ListaNumeros -> Numeros .)
    Suma            reduce using rule 74 (Expresion -> Numeros .)
    Resta           reduce using rule 74 (Expresion -> Numeros .)
    Mult            reduce using rule 74 (Expresion -> Numeros .)
    Div             reduce using rule 74 (Expresion -> Numeros .)
    Mod             reduce using rule 74 (Expresion -> Numeros .)
    Union           reduce using rule 74 (Expresion -> Numeros .)
    Dif             reduce using rule 74 (Expresion -> Numeros .)
    Inter           reduce using rule 74 (Expresion -> Numeros .)
    SumaConj        reduce using rule 74 (Expresion -> Numeros .)
    Or              reduce using rule 74 (Expresion -> Numeros .)
    And             reduce using rule 74 (Expresion -> Numeros .)
    RestaConj       reduce using rule 74 (Expresion -> Numeros .)
    MultConj        reduce using rule 74 (Expresion -> Numeros .)
    DivConj         reduce using rule 74 (Expresion -> Numeros .)
    ModConj         reduce using rule 74 (Expresion -> Numeros .)
    Equiv           reduce using rule 74 (Expresion -> Numeros .)
    Greater         reduce using rule 74 (Expresion -> Numeros .)
    Less            reduce using rule 74 (Expresion -> Numeros .)
    GreaterEqual    reduce using rule 74 (Expresion -> Numeros .)
    LessEqual       reduce using rule 74 (Expresion -> Numeros .)
    IsInConj        reduce using rule 74 (Expresion -> Numeros .)
    NotEquiv        reduce using rule 74 (Expresion -> Numeros .)

  ! Llave_Cierra    [ reduce using rule 74 (Expresion -> Numeros .) ]
  ! Coma            [ reduce using rule 74 (Expresion -> Numeros .) ]


state 85

    (12) ListaNumeros -> Aux_ListaNumeros .

    Llave_Cierra    reduce using rule 12 (ListaNumeros -> Aux_ListaNumeros .)
    Coma            reduce using rule 12 (ListaNumeros -> Aux_ListaNumeros .)


state 86

    (77) Expresion -> Llave_Abre Llave_Cierra .

    Suma            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Resta           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Mult            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Div             reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Mod             reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Union           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Dif             reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Inter           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    SumaConj        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Or              reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    And             reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    RestaConj       reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    MultConj        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    DivConj         reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    ModConj         reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Equiv           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Greater         reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Less            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    GreaterEqual    reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    LessEqual       reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    IsInConj        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    NotEquiv        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Coma            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    $end            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    While           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Pto_Coma        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    ElseIf          reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Else            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Par_Cierra      reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Llave_Cierra    reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Do              reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)


state 87

    (11) Aux_ListaNumeros -> Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Llave_Cierra    reduce using rule 11 (Aux_ListaNumeros -> Expresion .)
    Coma            reduce using rule 11 (Aux_ListaNumeros -> Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 88

    (76) Expresion -> Llave_Abre ListaNumeros . Llave_Cierra
    (13) ListaNumeros -> ListaNumeros . Coma Aux_ListaNumeros

    Llave_Cierra    shift and go to state 144
    Coma            shift and go to state 143


state 89

    (21) ListaComa -> ListaComa Coma . TipoImpresion
    (18) TipoImpresion -> . Strings
    (19) TipoImpresion -> . Expresion
    (6) Strings -> . String
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    String          shift and go to state 33
    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 35
    Numeros                        shift and go to state 29
    TipoImpresion                  shift and go to state 145
    id                             shift and go to state 31
    Boolean                        shift and go to state 45
    Strings                        shift and go to state 41

state 90

    (79) Expresion -> Not Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 79 (Expresion -> Not Expresion .)
    And             reduce using rule 79 (Expresion -> Not Expresion .)
    Coma            reduce using rule 79 (Expresion -> Not Expresion .)
    $end            reduce using rule 79 (Expresion -> Not Expresion .)
    While           reduce using rule 79 (Expresion -> Not Expresion .)
    Pto_Coma        reduce using rule 79 (Expresion -> Not Expresion .)
    ElseIf          reduce using rule 79 (Expresion -> Not Expresion .)
    Else            reduce using rule 79 (Expresion -> Not Expresion .)
    Par_Cierra      reduce using rule 79 (Expresion -> Not Expresion .)
    Llave_Cierra    reduce using rule 79 (Expresion -> Not Expresion .)
    Do              reduce using rule 79 (Expresion -> Not Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62

  ! Suma            [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Resta           [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Mult            [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Div             [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Mod             [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Union           [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Dif             [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Inter           [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! SumaConj        [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! RestaConj       [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! MultConj        [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! DivConj         [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! ModConj         [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Equiv           [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Greater         [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Less            [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! GreaterEqual    [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! LessEqual       [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! IsInConj        [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! NotEquiv        [ reduce using rule 79 (Expresion -> Not Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]


state 91

    (80) Expresion -> Resta Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 80 (Expresion -> Resta Expresion .)
    Resta           reduce using rule 80 (Expresion -> Resta Expresion .)
    Or              reduce using rule 80 (Expresion -> Resta Expresion .)
    And             reduce using rule 80 (Expresion -> Resta Expresion .)
    Equiv           reduce using rule 80 (Expresion -> Resta Expresion .)
    Greater         reduce using rule 80 (Expresion -> Resta Expresion .)
    Less            reduce using rule 80 (Expresion -> Resta Expresion .)
    GreaterEqual    reduce using rule 80 (Expresion -> Resta Expresion .)
    LessEqual       reduce using rule 80 (Expresion -> Resta Expresion .)
    IsInConj        reduce using rule 80 (Expresion -> Resta Expresion .)
    NotEquiv        reduce using rule 80 (Expresion -> Resta Expresion .)
    Coma            reduce using rule 80 (Expresion -> Resta Expresion .)
    $end            reduce using rule 80 (Expresion -> Resta Expresion .)
    While           reduce using rule 80 (Expresion -> Resta Expresion .)
    Pto_Coma        reduce using rule 80 (Expresion -> Resta Expresion .)
    ElseIf          reduce using rule 80 (Expresion -> Resta Expresion .)
    Else            reduce using rule 80 (Expresion -> Resta Expresion .)
    Par_Cierra      reduce using rule 80 (Expresion -> Resta Expresion .)
    Llave_Cierra    reduce using rule 80 (Expresion -> Resta Expresion .)
    Do              reduce using rule 80 (Expresion -> Resta Expresion .)
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Mult            [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! Div             [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! Mod             [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! Union           [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! Dif             [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! Inter           [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! SumaConj        [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! RestaConj       [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! MultConj        [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! DivConj         [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! ModConj         [ reduce using rule 80 (Expresion -> Resta Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 92

    (83) Expresion -> NumElemConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Resta           reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Mult            reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Div             reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Mod             reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Union           reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Dif             reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Inter           reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    SumaConj        reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Or              reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    And             reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    RestaConj       reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    MultConj        reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    DivConj         reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    ModConj         reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Equiv           reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Greater         reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Less            reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    GreaterEqual    reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    LessEqual       reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    IsInConj        reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    NotEquiv        reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Coma            reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    $end            reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    While           reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Pto_Coma        reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    ElseIf          reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Else            reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Par_Cierra      reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Llave_Cierra    reduce using rule 83 (Expresion -> NumElemConj Expresion .)
    Do              reduce using rule 83 (Expresion -> NumElemConj Expresion .)

  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! SumaConj        [ shift and go to state 78 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! RestaConj       [ shift and go to state 67 ]
  ! MultConj        [ shift and go to state 72 ]
  ! DivConj         [ shift and go to state 74 ]
  ! ModConj         [ shift and go to state 82 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 93

    (14) Asignacion -> id Equal Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    While           reduce using rule 14 (Asignacion -> id Equal Expresion .)
    ElseIf          reduce using rule 14 (Asignacion -> id Equal Expresion .)
    Else            reduce using rule 14 (Asignacion -> id Equal Expresion .)
    $end            reduce using rule 14 (Asignacion -> id Equal Expresion .)
    Pto_Coma        reduce using rule 14 (Asignacion -> id Equal Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 94

    (8) Asignacion_Conj -> id Equal Llave_Abre . Llave_Cierra
    (9) Asignacion_Conj -> id Equal Llave_Abre . ListaNumeros Llave_Cierra
    (76) Expresion -> Llave_Abre . ListaNumeros Llave_Cierra
    (77) Expresion -> Llave_Abre . Llave_Cierra
    (12) ListaNumeros -> . Aux_ListaNumeros
    (13) ListaNumeros -> . ListaNumeros Coma Aux_ListaNumeros
    (10) Aux_ListaNumeros -> . Numeros
    (11) Aux_ListaNumeros -> . Expresion
    (7) Numeros -> . Number
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (5) id -> . ID

    Llave_Cierra    shift and go to state 146
    Number          shift and go to state 44
    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    ID              shift and go to state 20

    Expresion                      shift and go to state 87
    Numeros                        shift and go to state 84
    Boolean                        shift and go to state 45
    ListaNumeros                   shift and go to state 147
    Aux_ListaNumeros               shift and go to state 85
    id                             shift and go to state 31

state 95

    (70) Ciclo_Repeat1 -> Repeat Instruccion1 While . Par_Abre Expresion Par_Cierra Do Instruccion1

    Par_Abre        shift and go to state 148


state 96

    (72) Ciclo_Repeat3 -> Repeat Bloque While . Par_Abre Expresion Par_Cierra

    Par_Abre        shift and go to state 149


state 97

    (52) Type -> Set .

    ID              reduce using rule 52 (Type -> Set .)


state 98

    (47) Lista_Declaracion -> Lista_Declaracion_Base .

    In              reduce using rule 47 (Lista_Declaracion -> Lista_Declaracion_Base .)
    Set             reduce using rule 47 (Lista_Declaracion -> Lista_Declaracion_Base .)
    Bool            reduce using rule 47 (Lista_Declaracion -> Lista_Declaracion_Base .)
    Int             reduce using rule 47 (Lista_Declaracion -> Lista_Declaracion_Base .)


state 99

    (54) Type -> Int .

    ID              reduce using rule 54 (Type -> Int .)


state 100

    (53) Type -> Bool .

    ID              reduce using rule 53 (Type -> Bool .)


state 101

    (50) Declaracion -> Using In .

    Llave_Cierra    reduce using rule 50 (Declaracion -> Using In .)
    Print           reduce using rule 50 (Declaracion -> Using In .)
    PrintLn         reduce using rule 50 (Declaracion -> Using In .)
    Scan            reduce using rule 50 (Declaracion -> Using In .)
    Repeat          reduce using rule 50 (Declaracion -> Using In .)
    Llave_Abre      reduce using rule 50 (Declaracion -> Using In .)
    If              reduce using rule 50 (Declaracion -> Using In .)
    For             reduce using rule 50 (Declaracion -> Using In .)
    While           reduce using rule 50 (Declaracion -> Using In .)
    ID              reduce using rule 50 (Declaracion -> Using In .)


state 102

    (49) Declaracion -> Using Lista_Declaracion . In
    (48) Lista_Declaracion -> Lista_Declaracion . Lista_Declaracion_Base
    (45) Lista_Declaracion_Base -> . Type ListaVariables Pto_Coma
    (46) Lista_Declaracion_Base -> . Type id Equal Expresion Pto_Coma
    (52) Type -> . Set
    (53) Type -> . Bool
    (54) Type -> . Int

    In              shift and go to state 151
    Set             shift and go to state 97
    Bool            shift and go to state 100
    Int             shift and go to state 99

    Lista_Declaracion_Base         shift and go to state 150
    Type                           shift and go to state 103

state 103

    (45) Lista_Declaracion_Base -> Type . ListaVariables Pto_Coma
    (46) Lista_Declaracion_Base -> Type . id Equal Expresion Pto_Coma
    (42) ListaVariables -> . Aux_ListaVariables
    (43) ListaVariables -> . ListaVariables Coma Aux_ListaVariables
    (5) id -> . ID
    (44) Aux_ListaVariables -> . id

    ID              shift and go to state 20

    ListaVariables                 shift and go to state 152
    Aux_ListaVariables             shift and go to state 153
    id                             shift and go to state 154

state 104

    (55) Bloque -> Llave_Abre Declaracion Llave_Cierra .

    ElseIf          reduce using rule 55 (Bloque -> Llave_Abre Declaracion Llave_Cierra .)
    Else            reduce using rule 55 (Bloque -> Llave_Abre Declaracion Llave_Cierra .)
    $end            reduce using rule 55 (Bloque -> Llave_Abre Declaracion Llave_Cierra .)
    While           reduce using rule 55 (Bloque -> Llave_Abre Declaracion Llave_Cierra .)
    Pto_Coma        reduce using rule 55 (Bloque -> Llave_Abre Declaracion Llave_Cierra .)


state 105

    (72) Ciclo_Repeat3 -> Repeat . Bloque While Par_Abre Expresion Par_Cierra
    (70) Ciclo_Repeat1 -> Repeat . Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    Instruccion1                   shift and go to state 47
    id                             shift and go to state 7
    PrintLneo                      shift and go to state 10
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Printeo                        shift and go to state 9
    Bloque                         shift and go to state 48

state 106

    (40) Instruccion2 -> Instruccion2_Base .

    Llave_Cierra    reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    Print           reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    PrintLn         reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    Scan            reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    Repeat          reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    Llave_Abre      reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    If              reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    For             reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    While           reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)
    ID              reduce using rule 40 (Instruccion2 -> Instruccion2_Base .)


state 107

    (36) Instruccion2_Base -> PrintLneo . Pto_Coma

    Pto_Coma        shift and go to state 155


state 108

    (38) Instruccion2_Base -> Ciclo_Repeat3 . Pto_Coma
    (29) Instruccion_Type -> Ciclo_Repeat3 .

  ! shift/reduce conflict for Pto_Coma resolved as shift
    Pto_Coma        shift and go to state 156

  ! Pto_Coma        [ reduce using rule 29 (Instruccion_Type -> Ciclo_Repeat3 .) ]


state 109

    (39) Instruccion2_Base -> Ciclo_Repeat1 . Pto_Coma
    (27) Instruccion_Type -> Ciclo_Repeat1 .

  ! shift/reduce conflict for Pto_Coma resolved as shift
    Pto_Coma        shift and go to state 157

  ! Pto_Coma        [ reduce using rule 27 (Instruccion_Type -> Ciclo_Repeat1 .) ]


state 110

    (37) Instruccion2_Base -> Scaneo . Pto_Coma

    Pto_Coma        shift and go to state 158


state 111

    (34) Instruccion2_Base -> Instruccion_Type . Pto_Coma

    Pto_Coma        shift and go to state 159


state 112

    (56) Bloque -> Llave_Abre Declaracion Instruccion2 . Llave_Cierra
    (41) Instruccion2 -> Instruccion2 . Instruccion2_Base
    (34) Instruccion2_Base -> . Instruccion_Type Pto_Coma
    (35) Instruccion2_Base -> . Printeo Pto_Coma
    (36) Instruccion2_Base -> . PrintLneo Pto_Coma
    (37) Instruccion2_Base -> . Scaneo Pto_Coma
    (38) Instruccion2_Base -> . Ciclo_Repeat3 Pto_Coma
    (39) Instruccion2_Base -> . Ciclo_Repeat1 Pto_Coma
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (14) Asignacion -> . id Equal Expresion
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (5) id -> . ID

    Llave_Cierra    shift and go to state 160
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    Repeat          shift and go to state 105
    Llave_Abre      shift and go to state 18
    If              shift and go to state 26
    For             shift and go to state 4
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    id                             shift and go to state 7
    Instruccion2_Base              shift and go to state 161
    PrintLneo                      shift and go to state 107
    Ciclo_Repeat3                  shift and go to state 108
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 109
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 110
    Instruccion_Type               shift and go to state 111
    Asignacion_Conj                shift and go to state 23
    Printeo                        shift and go to state 113
    Bloque                         shift and go to state 114

state 113

    (35) Instruccion2_Base -> Printeo . Pto_Coma

    Pto_Coma        shift and go to state 162


state 114

    (23) Instruccion_Type -> Bloque .

    Pto_Coma        reduce using rule 23 (Instruccion_Type -> Bloque .)
    ElseIf          reduce using rule 23 (Instruccion_Type -> Bloque .)
    Else            reduce using rule 23 (Instruccion_Type -> Bloque .)
    $end            reduce using rule 23 (Instruccion_Type -> Bloque .)
    While           reduce using rule 23 (Instruccion_Type -> Bloque .)


state 115

    (71) Ciclo_Repeat2 -> While Par_Abre Expresion . Par_Cierra Do Bloque
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Par_Cierra      shift and go to state 163
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 116

    (59) Condicion -> If Par_Abre Expresion . Par_Cierra Cuerpo
    (60) Condicion -> If Par_Abre Expresion . Par_Cierra Cuerpo Condicion_Else_If
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Par_Cierra      shift and go to state 164
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 117

    (65) Ciclo_For -> For id Direccion id . Do Cuerpo
    (75) Expresion -> id .

  ! shift/reduce conflict for Do resolved as shift
    Do              shift and go to state 165
    Suma            reduce using rule 75 (Expresion -> id .)
    Resta           reduce using rule 75 (Expresion -> id .)
    Mult            reduce using rule 75 (Expresion -> id .)
    Div             reduce using rule 75 (Expresion -> id .)
    Mod             reduce using rule 75 (Expresion -> id .)
    Union           reduce using rule 75 (Expresion -> id .)
    Dif             reduce using rule 75 (Expresion -> id .)
    Inter           reduce using rule 75 (Expresion -> id .)
    SumaConj        reduce using rule 75 (Expresion -> id .)
    Or              reduce using rule 75 (Expresion -> id .)
    And             reduce using rule 75 (Expresion -> id .)
    RestaConj       reduce using rule 75 (Expresion -> id .)
    MultConj        reduce using rule 75 (Expresion -> id .)
    DivConj         reduce using rule 75 (Expresion -> id .)
    ModConj         reduce using rule 75 (Expresion -> id .)
    Equiv           reduce using rule 75 (Expresion -> id .)
    Greater         reduce using rule 75 (Expresion -> id .)
    Less            reduce using rule 75 (Expresion -> id .)
    GreaterEqual    reduce using rule 75 (Expresion -> id .)
    LessEqual       reduce using rule 75 (Expresion -> id .)
    IsInConj        reduce using rule 75 (Expresion -> id .)
    NotEquiv        reduce using rule 75 (Expresion -> id .)

  ! Do              [ reduce using rule 75 (Expresion -> id .) ]


state 118

    (66) Ciclo_For -> For id Direccion Expresion . Do Cuerpo
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Do              shift and go to state 166
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 119

    (67) Ciclo_For -> For id Direccion Llave_Abre . ListaNumeros Llave_Cierra Do Cuerpo
    (76) Expresion -> Llave_Abre . ListaNumeros Llave_Cierra
    (77) Expresion -> Llave_Abre . Llave_Cierra
    (12) ListaNumeros -> . Aux_ListaNumeros
    (13) ListaNumeros -> . ListaNumeros Coma Aux_ListaNumeros
    (10) Aux_ListaNumeros -> . Numeros
    (11) Aux_ListaNumeros -> . Expresion
    (7) Numeros -> . Number
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (5) id -> . ID

    Llave_Cierra    shift and go to state 86
    Number          shift and go to state 44
    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    ID              shift and go to state 20

    Expresion                      shift and go to state 87
    Numeros                        shift and go to state 84
    Boolean                        shift and go to state 45
    ListaNumeros                   shift and go to state 167
    Aux_ListaNumeros               shift and go to state 85
    id                             shift and go to state 31

state 120

    (78) Expresion -> Par_Abre Expresion Par_Cierra .

    Suma            reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Resta           reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Mult            reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Div             reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Mod             reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Union           reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Dif             reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Inter           reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    SumaConj        reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Or              reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    And             reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    RestaConj       reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    MultConj        reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    DivConj         reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    ModConj         reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Equiv           reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Greater         reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Less            reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    GreaterEqual    reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    LessEqual       reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    IsInConj        reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    NotEquiv        reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Coma            reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    $end            reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    While           reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Pto_Coma        reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    ElseIf          reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Else            reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Par_Cierra      reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Llave_Cierra    reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)
    Do              reduce using rule 78 (Expresion -> Par_Abre Expresion Par_Cierra .)


state 121

    (105) Expresion -> Expresion NotEquiv Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    And             reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    Equiv           reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    NotEquiv        reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    Coma            reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    $end            reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    While           reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    Pto_Coma        reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    ElseIf          reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    Else            reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    Par_Cierra      reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    Llave_Cierra    reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    Do              reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63

  ! Suma            [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Resta           [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Mult            [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Div             [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Mod             [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Union           [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Dif             [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Inter           [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! SumaConj        [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! RestaConj       [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! MultConj        [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! DivConj         [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! ModConj         [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Greater         [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Less            [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! GreaterEqual    [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! LessEqual       [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! IsInConj        [ reduce using rule 105 (Expresion -> Expresion NotEquiv Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 122

    (104) Expresion -> Expresion IsInConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    And             reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Equiv           reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Greater         reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Less            reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    GreaterEqual    reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    LessEqual       reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    IsInConj        reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    NotEquiv        reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Coma            reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    $end            reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    While           reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Pto_Coma        reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    ElseIf          reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Else            reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Par_Cierra      reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Llave_Cierra    reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Do              reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Suma            [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! Resta           [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! Mult            [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! Div             [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! Mod             [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! Union           [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! Dif             [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! Inter           [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! SumaConj        [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! RestaConj       [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! MultConj        [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! DivConj         [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! ModConj         [ reduce using rule 104 (Expresion -> Expresion IsInConj Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 123

    (89) Expresion -> Expresion Union Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Resta           reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Mult            reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Div             reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Mod             reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Union           reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Dif             reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Or              reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    And             reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Equiv           reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Greater         reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Less            reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    GreaterEqual    reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    LessEqual       reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    IsInConj        reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    NotEquiv        reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Coma            reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    $end            reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    While           reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Pto_Coma        reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    ElseIf          reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Else            reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Par_Cierra      reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Llave_Cierra    reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Do              reduce using rule 89 (Expresion -> Expresion Union Expresion .)
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Inter           [ reduce using rule 89 (Expresion -> Expresion Union Expresion .) ]
  ! SumaConj        [ reduce using rule 89 (Expresion -> Expresion Union Expresion .) ]
  ! RestaConj       [ reduce using rule 89 (Expresion -> Expresion Union Expresion .) ]
  ! MultConj        [ reduce using rule 89 (Expresion -> Expresion Union Expresion .) ]
  ! DivConj         [ reduce using rule 89 (Expresion -> Expresion Union Expresion .) ]
  ! ModConj         [ reduce using rule 89 (Expresion -> Expresion Union Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 124

    (87) Expresion -> Expresion Div Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Resta           reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Mult            reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Div             reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Mod             reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Or              reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    And             reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Equiv           reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Greater         reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Less            reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    GreaterEqual    reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    LessEqual       reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    IsInConj        reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    NotEquiv        reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Coma            reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    $end            reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    While           reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Pto_Coma        reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    ElseIf          reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Else            reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Par_Cierra      reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Llave_Cierra    reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Do              reduce using rule 87 (Expresion -> Expresion Div Expresion .)
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Union           [ reduce using rule 87 (Expresion -> Expresion Div Expresion .) ]
  ! Dif             [ reduce using rule 87 (Expresion -> Expresion Div Expresion .) ]
  ! Inter           [ reduce using rule 87 (Expresion -> Expresion Div Expresion .) ]
  ! SumaConj        [ reduce using rule 87 (Expresion -> Expresion Div Expresion .) ]
  ! RestaConj       [ reduce using rule 87 (Expresion -> Expresion Div Expresion .) ]
  ! MultConj        [ reduce using rule 87 (Expresion -> Expresion Div Expresion .) ]
  ! DivConj         [ reduce using rule 87 (Expresion -> Expresion Div Expresion .) ]
  ! ModConj         [ reduce using rule 87 (Expresion -> Expresion Div Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 125

    (100) Expresion -> Expresion Greater Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    And             reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Equiv           reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Greater         reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Less            reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    GreaterEqual    reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    LessEqual       reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    NotEquiv        reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Coma            reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    $end            reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    While           reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Pto_Coma        reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    ElseIf          reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Else            reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Par_Cierra      reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Llave_Cierra    reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Do              reduce using rule 100 (Expresion -> Expresion Greater Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    IsInConj        shift and go to state 63

  ! Suma            [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! Resta           [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! Mult            [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! Div             [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! Mod             [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! Union           [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! Dif             [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! Inter           [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! SumaConj        [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! RestaConj       [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! MultConj        [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! DivConj         [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! ModConj         [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! IsInConj        [ reduce using rule 100 (Expresion -> Expresion Greater Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 126

    (95) Expresion -> Expresion RestaConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Resta           reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Mult            reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Div             reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Mod             reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Union           reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Dif             reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Inter           reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    SumaConj        reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Or              reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    And             reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    RestaConj       reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Equiv           reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Greater         reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Less            reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    GreaterEqual    reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    LessEqual       reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    IsInConj        reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    NotEquiv        reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Coma            reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    $end            reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    While           reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Pto_Coma        reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    ElseIf          reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Else            reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Par_Cierra      reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Llave_Cierra    reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    Do              reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .)
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! MultConj        [ reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .) ]
  ! DivConj         [ reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .) ]
  ! ModConj         [ reduce using rule 95 (Expresion -> Expresion RestaConj Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! SumaConj        [ shift and go to state 78 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! RestaConj       [ shift and go to state 67 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 127

    (94) Expresion -> Expresion And Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 94 (Expresion -> Expresion And Expresion .)
    And             reduce using rule 94 (Expresion -> Expresion And Expresion .)
    Coma            reduce using rule 94 (Expresion -> Expresion And Expresion .)
    $end            reduce using rule 94 (Expresion -> Expresion And Expresion .)
    While           reduce using rule 94 (Expresion -> Expresion And Expresion .)
    Pto_Coma        reduce using rule 94 (Expresion -> Expresion And Expresion .)
    ElseIf          reduce using rule 94 (Expresion -> Expresion And Expresion .)
    Else            reduce using rule 94 (Expresion -> Expresion And Expresion .)
    Par_Cierra      reduce using rule 94 (Expresion -> Expresion And Expresion .)
    Llave_Cierra    reduce using rule 94 (Expresion -> Expresion And Expresion .)
    Do              reduce using rule 94 (Expresion -> Expresion And Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62

  ! Suma            [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Resta           [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Mult            [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Div             [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Mod             [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Union           [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Dif             [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Inter           [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! SumaConj        [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! RestaConj       [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! MultConj        [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! DivConj         [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! ModConj         [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Equiv           [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Greater         [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Less            [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! GreaterEqual    [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! LessEqual       [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! IsInConj        [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! NotEquiv        [ reduce using rule 94 (Expresion -> Expresion And Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]


state 128

    (103) Expresion -> Expresion LessEqual Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    And             reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Equiv           reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Greater         reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Less            reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    GreaterEqual    reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    LessEqual       reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    NotEquiv        reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Coma            reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    $end            reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    While           reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Pto_Coma        reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    ElseIf          reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Else            reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Par_Cierra      reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Llave_Cierra    reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Do              reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    IsInConj        shift and go to state 63

  ! Suma            [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! Resta           [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! Mult            [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! Div             [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! Mod             [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! Union           [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! Dif             [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! Inter           [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! SumaConj        [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! RestaConj       [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! MultConj        [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! DivConj         [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! ModConj         [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! IsInConj        [ reduce using rule 103 (Expresion -> Expresion LessEqual Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 129

    (84) Expresion -> Expresion Suma Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Resta           reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Or              reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    And             reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Equiv           reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Greater         reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Less            reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    GreaterEqual    reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    LessEqual       reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    IsInConj        reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    NotEquiv        reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Coma            reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    $end            reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    While           reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Pto_Coma        reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    ElseIf          reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Else            reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Par_Cierra      reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Llave_Cierra    reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Do              reduce using rule 84 (Expresion -> Expresion Suma Expresion .)
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Mult            [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! Div             [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! Mod             [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! Union           [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! Dif             [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! Inter           [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! SumaConj        [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! RestaConj       [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! MultConj        [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! DivConj         [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! ModConj         [ reduce using rule 84 (Expresion -> Expresion Suma Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 130

    (88) Expresion -> Expresion Mod Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Resta           reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Mult            reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Div             reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Mod             reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Or              reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    And             reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Equiv           reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Greater         reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Less            reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    GreaterEqual    reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    LessEqual       reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    IsInConj        reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    NotEquiv        reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Coma            reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    $end            reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    While           reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Pto_Coma        reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    ElseIf          reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Else            reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Par_Cierra      reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Llave_Cierra    reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Do              reduce using rule 88 (Expresion -> Expresion Mod Expresion .)
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Union           [ reduce using rule 88 (Expresion -> Expresion Mod Expresion .) ]
  ! Dif             [ reduce using rule 88 (Expresion -> Expresion Mod Expresion .) ]
  ! Inter           [ reduce using rule 88 (Expresion -> Expresion Mod Expresion .) ]
  ! SumaConj        [ reduce using rule 88 (Expresion -> Expresion Mod Expresion .) ]
  ! RestaConj       [ reduce using rule 88 (Expresion -> Expresion Mod Expresion .) ]
  ! MultConj        [ reduce using rule 88 (Expresion -> Expresion Mod Expresion .) ]
  ! DivConj         [ reduce using rule 88 (Expresion -> Expresion Mod Expresion .) ]
  ! ModConj         [ reduce using rule 88 (Expresion -> Expresion Mod Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 131

    (96) Expresion -> Expresion MultConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Resta           reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Mult            reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Div             reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Mod             reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Union           reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Dif             reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Inter           reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    SumaConj        reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Or              reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    And             reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    RestaConj       reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    MultConj        reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    DivConj         reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    ModConj         reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Equiv           reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Greater         reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Less            reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    GreaterEqual    reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    LessEqual       reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    IsInConj        reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    NotEquiv        reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Coma            reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    $end            reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    While           reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Pto_Coma        reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    ElseIf          reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Else            reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Par_Cierra      reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Llave_Cierra    reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)
    Do              reduce using rule 96 (Expresion -> Expresion MultConj Expresion .)

  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! SumaConj        [ shift and go to state 78 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! RestaConj       [ shift and go to state 67 ]
  ! MultConj        [ shift and go to state 72 ]
  ! DivConj         [ shift and go to state 74 ]
  ! ModConj         [ shift and go to state 82 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 132

    (90) Expresion -> Expresion Dif Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Resta           reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Mult            reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Div             reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Mod             reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Union           reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Dif             reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Or              reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    And             reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Equiv           reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Greater         reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Less            reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    GreaterEqual    reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    LessEqual       reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    IsInConj        reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    NotEquiv        reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Coma            reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    $end            reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    While           reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Pto_Coma        reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    ElseIf          reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Else            reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Par_Cierra      reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Llave_Cierra    reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Do              reduce using rule 90 (Expresion -> Expresion Dif Expresion .)
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Inter           [ reduce using rule 90 (Expresion -> Expresion Dif Expresion .) ]
  ! SumaConj        [ reduce using rule 90 (Expresion -> Expresion Dif Expresion .) ]
  ! RestaConj       [ reduce using rule 90 (Expresion -> Expresion Dif Expresion .) ]
  ! MultConj        [ reduce using rule 90 (Expresion -> Expresion Dif Expresion .) ]
  ! DivConj         [ reduce using rule 90 (Expresion -> Expresion Dif Expresion .) ]
  ! ModConj         [ reduce using rule 90 (Expresion -> Expresion Dif Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 133

    (97) Expresion -> Expresion DivConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Resta           reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Mult            reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Div             reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Mod             reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Union           reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Dif             reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Inter           reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    SumaConj        reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Or              reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    And             reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    RestaConj       reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    MultConj        reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    DivConj         reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    ModConj         reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Equiv           reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Greater         reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Less            reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    GreaterEqual    reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    LessEqual       reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    IsInConj        reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    NotEquiv        reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Coma            reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    $end            reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    While           reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Pto_Coma        reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    ElseIf          reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Else            reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Par_Cierra      reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Llave_Cierra    reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)
    Do              reduce using rule 97 (Expresion -> Expresion DivConj Expresion .)

  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! SumaConj        [ shift and go to state 78 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! RestaConj       [ shift and go to state 67 ]
  ! MultConj        [ shift and go to state 72 ]
  ! DivConj         [ shift and go to state 74 ]
  ! ModConj         [ shift and go to state 82 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 134

    (85) Expresion -> Expresion Resta Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Resta           reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Or              reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    And             reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Equiv           reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Greater         reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Less            reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    GreaterEqual    reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    LessEqual       reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    IsInConj        reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    NotEquiv        reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Coma            reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    $end            reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    While           reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Pto_Coma        reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    ElseIf          reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Else            reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Par_Cierra      reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Llave_Cierra    reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Do              reduce using rule 85 (Expresion -> Expresion Resta Expresion .)
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Mult            [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! Div             [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! Mod             [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! Union           [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! Dif             [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! Inter           [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! SumaConj        [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! RestaConj       [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! MultConj        [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! DivConj         [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! ModConj         [ reduce using rule 85 (Expresion -> Expresion Resta Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 135

    (91) Expresion -> Expresion Inter Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Resta           reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Mult            reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Div             reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Mod             reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Union           reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Dif             reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Inter           reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Or              reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    And             reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Equiv           reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Greater         reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Less            reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    GreaterEqual    reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    LessEqual       reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    IsInConj        reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    NotEquiv        reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Coma            reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    $end            reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    While           reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Pto_Coma        reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    ElseIf          reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Else            reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Par_Cierra      reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Llave_Cierra    reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    Do              reduce using rule 91 (Expresion -> Expresion Inter Expresion .)
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! SumaConj        [ reduce using rule 91 (Expresion -> Expresion Inter Expresion .) ]
  ! RestaConj       [ reduce using rule 91 (Expresion -> Expresion Inter Expresion .) ]
  ! MultConj        [ reduce using rule 91 (Expresion -> Expresion Inter Expresion .) ]
  ! DivConj         [ reduce using rule 91 (Expresion -> Expresion Inter Expresion .) ]
  ! ModConj         [ reduce using rule 91 (Expresion -> Expresion Inter Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 136

    (93) Expresion -> Expresion Or Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    Coma            reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    $end            reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    While           reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    Pto_Coma        reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    ElseIf          reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    Else            reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    Par_Cierra      reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    Llave_Cierra    reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    Do              reduce using rule 93 (Expresion -> Expresion Or Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62

  ! Suma            [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Resta           [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Mult            [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Div             [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Mod             [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Union           [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Dif             [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Inter           [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! SumaConj        [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! And             [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! RestaConj       [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! MultConj        [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! DivConj         [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! ModConj         [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Equiv           [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Greater         [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Less            [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! GreaterEqual    [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! LessEqual       [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! IsInConj        [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! NotEquiv        [ reduce using rule 93 (Expresion -> Expresion Or Expresion .) ]
  ! Or              [ shift and go to state 77 ]


state 137

    (92) Expresion -> Expresion SumaConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Resta           reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Mult            reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Div             reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Mod             reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Union           reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Dif             reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Inter           reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    SumaConj        reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Or              reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    And             reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    RestaConj       reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Equiv           reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Greater         reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Less            reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    GreaterEqual    reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    LessEqual       reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    IsInConj        reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    NotEquiv        reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Coma            reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    $end            reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    While           reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Pto_Coma        reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    ElseIf          reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Else            reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Par_Cierra      reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Llave_Cierra    reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    Do              reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .)
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! MultConj        [ reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .) ]
  ! DivConj         [ reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .) ]
  ! ModConj         [ reduce using rule 92 (Expresion -> Expresion SumaConj Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! SumaConj        [ shift and go to state 78 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! RestaConj       [ shift and go to state 67 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 138

    (102) Expresion -> Expresion GreaterEqual Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    And             reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Equiv           reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Greater         reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Less            reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    GreaterEqual    reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    LessEqual       reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    NotEquiv        reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Coma            reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    $end            reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    While           reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Pto_Coma        reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    ElseIf          reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Else            reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Par_Cierra      reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Llave_Cierra    reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Do              reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    IsInConj        shift and go to state 63

  ! Suma            [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! Resta           [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! Mult            [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! Div             [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! Mod             [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! Union           [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! Dif             [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! Inter           [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! SumaConj        [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! RestaConj       [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! MultConj        [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! DivConj         [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! ModConj         [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! IsInConj        [ reduce using rule 102 (Expresion -> Expresion GreaterEqual Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 139

    (101) Expresion -> Expresion Less Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    And             reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Equiv           reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Greater         reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Less            reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    GreaterEqual    reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    LessEqual       reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    NotEquiv        reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Coma            reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    $end            reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    While           reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Pto_Coma        reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    ElseIf          reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Else            reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Par_Cierra      reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Llave_Cierra    reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Do              reduce using rule 101 (Expresion -> Expresion Less Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    IsInConj        shift and go to state 63

  ! Suma            [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! Resta           [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! Mult            [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! Div             [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! Mod             [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! Union           [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! Dif             [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! Inter           [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! SumaConj        [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! RestaConj       [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! MultConj        [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! DivConj         [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! ModConj         [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! IsInConj        [ reduce using rule 101 (Expresion -> Expresion Less Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 140

    (86) Expresion -> Expresion Mult Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Resta           reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Mult            reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Div             reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Mod             reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Or              reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    And             reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Equiv           reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Greater         reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Less            reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    GreaterEqual    reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    LessEqual       reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    IsInConj        reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    NotEquiv        reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Coma            reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    $end            reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    While           reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Pto_Coma        reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    ElseIf          reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Else            reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Par_Cierra      reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Llave_Cierra    reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Do              reduce using rule 86 (Expresion -> Expresion Mult Expresion .)
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82

  ! Union           [ reduce using rule 86 (Expresion -> Expresion Mult Expresion .) ]
  ! Dif             [ reduce using rule 86 (Expresion -> Expresion Mult Expresion .) ]
  ! Inter           [ reduce using rule 86 (Expresion -> Expresion Mult Expresion .) ]
  ! SumaConj        [ reduce using rule 86 (Expresion -> Expresion Mult Expresion .) ]
  ! RestaConj       [ reduce using rule 86 (Expresion -> Expresion Mult Expresion .) ]
  ! MultConj        [ reduce using rule 86 (Expresion -> Expresion Mult Expresion .) ]
  ! DivConj         [ reduce using rule 86 (Expresion -> Expresion Mult Expresion .) ]
  ! ModConj         [ reduce using rule 86 (Expresion -> Expresion Mult Expresion .) ]
  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 141

    (98) Expresion -> Expresion ModConj Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Suma            reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Resta           reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Mult            reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Div             reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Mod             reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Union           reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Dif             reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Inter           reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    SumaConj        reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Or              reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    And             reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    RestaConj       reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    MultConj        reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    DivConj         reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    ModConj         reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Equiv           reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Greater         reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Less            reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    GreaterEqual    reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    LessEqual       reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    IsInConj        reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    NotEquiv        reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Coma            reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    $end            reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    While           reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Pto_Coma        reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    ElseIf          reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Else            reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Par_Cierra      reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Llave_Cierra    reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)
    Do              reduce using rule 98 (Expresion -> Expresion ModConj Expresion .)

  ! Suma            [ shift and go to state 70 ]
  ! Resta           [ shift and go to state 75 ]
  ! Mult            [ shift and go to state 81 ]
  ! Div             [ shift and go to state 65 ]
  ! Mod             [ shift and go to state 71 ]
  ! Union           [ shift and go to state 64 ]
  ! Dif             [ shift and go to state 73 ]
  ! Inter           [ shift and go to state 76 ]
  ! SumaConj        [ shift and go to state 78 ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! RestaConj       [ shift and go to state 67 ]
  ! MultConj        [ shift and go to state 72 ]
  ! DivConj         [ shift and go to state 74 ]
  ! ModConj         [ shift and go to state 82 ]
  ! Equiv           [ shift and go to state 83 ]
  ! Greater         [ shift and go to state 66 ]
  ! Less            [ shift and go to state 80 ]
  ! GreaterEqual    [ shift and go to state 79 ]
  ! LessEqual       [ shift and go to state 69 ]
  ! IsInConj        [ shift and go to state 63 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 142

    (99) Expresion -> Expresion Equiv Expresion .
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Or              reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    And             reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    Equiv           reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    NotEquiv        reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    Coma            reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    $end            reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    While           reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    Pto_Coma        reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    ElseIf          reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    Else            reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    Par_Cierra      reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    Llave_Cierra    reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    Do              reduce using rule 99 (Expresion -> Expresion Equiv Expresion .)
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63

  ! Suma            [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Resta           [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Mult            [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Div             [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Mod             [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Union           [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Dif             [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Inter           [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! SumaConj        [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! RestaConj       [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! MultConj        [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! DivConj         [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! ModConj         [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Greater         [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Less            [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! GreaterEqual    [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! LessEqual       [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! IsInConj        [ reduce using rule 99 (Expresion -> Expresion Equiv Expresion .) ]
  ! Or              [ shift and go to state 77 ]
  ! And             [ shift and go to state 68 ]
  ! Equiv           [ shift and go to state 83 ]
  ! NotEquiv        [ shift and go to state 62 ]


state 143

    (13) ListaNumeros -> ListaNumeros Coma . Aux_ListaNumeros
    (10) Aux_ListaNumeros -> . Numeros
    (11) Aux_ListaNumeros -> . Expresion
    (7) Numeros -> . Number
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (5) id -> . ID

    Number          shift and go to state 44
    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    ID              shift and go to state 20

    Expresion                      shift and go to state 87
    Numeros                        shift and go to state 84
    Boolean                        shift and go to state 45
    Aux_ListaNumeros               shift and go to state 168
    id                             shift and go to state 31

state 144

    (76) Expresion -> Llave_Abre ListaNumeros Llave_Cierra .

    Suma            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Resta           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Mult            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Div             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Mod             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Union           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Dif             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Inter           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    SumaConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Or              reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    And             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    RestaConj       reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    MultConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    DivConj         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    ModConj         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Equiv           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Greater         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Less            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    GreaterEqual    reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    LessEqual       reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    IsInConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    NotEquiv        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Coma            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    $end            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    While           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Pto_Coma        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    ElseIf          reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Else            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Par_Cierra      reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Llave_Cierra    reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Do              reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)


state 145

    (21) ListaComa -> ListaComa Coma TipoImpresion .

    Coma            reduce using rule 21 (ListaComa -> ListaComa Coma TipoImpresion .)
    $end            reduce using rule 21 (ListaComa -> ListaComa Coma TipoImpresion .)
    While           reduce using rule 21 (ListaComa -> ListaComa Coma TipoImpresion .)
    Pto_Coma        reduce using rule 21 (ListaComa -> ListaComa Coma TipoImpresion .)
    ElseIf          reduce using rule 21 (ListaComa -> ListaComa Coma TipoImpresion .)
    Else            reduce using rule 21 (ListaComa -> ListaComa Coma TipoImpresion .)


state 146

    (8) Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .
    (77) Expresion -> Llave_Abre Llave_Cierra .

  ! reduce/reduce conflict for $end resolved using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
  ! reduce/reduce conflict for While resolved using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
  ! reduce/reduce conflict for Pto_Coma resolved using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
  ! reduce/reduce conflict for ElseIf resolved using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
  ! reduce/reduce conflict for Else resolved using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
    While           reduce using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
    Pto_Coma        reduce using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
    ElseIf          reduce using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
    Else            reduce using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
    $end            reduce using rule 8 (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra .)
    Suma            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Resta           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Mult            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Div             reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Mod             reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Union           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Dif             reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Inter           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    SumaConj        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Or              reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    And             reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    RestaConj       reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    MultConj        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    DivConj         reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    ModConj         reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Equiv           reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Greater         reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    Less            reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    GreaterEqual    reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    LessEqual       reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    IsInConj        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)
    NotEquiv        reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .)

  ! $end            [ reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .) ]
  ! While           [ reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .) ]
  ! Pto_Coma        [ reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .) ]
  ! ElseIf          [ reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .) ]
  ! Else            [ reduce using rule 77 (Expresion -> Llave_Abre Llave_Cierra .) ]


state 147

    (9) Asignacion_Conj -> id Equal Llave_Abre ListaNumeros . Llave_Cierra
    (76) Expresion -> Llave_Abre ListaNumeros . Llave_Cierra
    (13) ListaNumeros -> ListaNumeros . Coma Aux_ListaNumeros

    Llave_Cierra    shift and go to state 169
    Coma            shift and go to state 143


state 148

    (70) Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre . Expresion Par_Cierra Do Instruccion1
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 170
    Numeros                        shift and go to state 29
    Boolean                        shift and go to state 45
    id                             shift and go to state 31

state 149

    (72) Ciclo_Repeat3 -> Repeat Bloque While Par_Abre . Expresion Par_Cierra
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 171
    Numeros                        shift and go to state 29
    Boolean                        shift and go to state 45
    id                             shift and go to state 31

state 150

    (48) Lista_Declaracion -> Lista_Declaracion Lista_Declaracion_Base .

    In              reduce using rule 48 (Lista_Declaracion -> Lista_Declaracion Lista_Declaracion_Base .)
    Set             reduce using rule 48 (Lista_Declaracion -> Lista_Declaracion Lista_Declaracion_Base .)
    Bool            reduce using rule 48 (Lista_Declaracion -> Lista_Declaracion Lista_Declaracion_Base .)
    Int             reduce using rule 48 (Lista_Declaracion -> Lista_Declaracion Lista_Declaracion_Base .)


state 151

    (49) Declaracion -> Using Lista_Declaracion In .

    Llave_Cierra    reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    Print           reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    PrintLn         reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    Scan            reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    Repeat          reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    Llave_Abre      reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    If              reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    For             reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    While           reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)
    ID              reduce using rule 49 (Declaracion -> Using Lista_Declaracion In .)


state 152

    (45) Lista_Declaracion_Base -> Type ListaVariables . Pto_Coma
    (43) ListaVariables -> ListaVariables . Coma Aux_ListaVariables

    Pto_Coma        shift and go to state 173
    Coma            shift and go to state 172


state 153

    (42) ListaVariables -> Aux_ListaVariables .

    Pto_Coma        reduce using rule 42 (ListaVariables -> Aux_ListaVariables .)
    Coma            reduce using rule 42 (ListaVariables -> Aux_ListaVariables .)


state 154

    (46) Lista_Declaracion_Base -> Type id . Equal Expresion Pto_Coma
    (44) Aux_ListaVariables -> id .

    Equal           shift and go to state 174
    Pto_Coma        reduce using rule 44 (Aux_ListaVariables -> id .)
    Coma            reduce using rule 44 (Aux_ListaVariables -> id .)


state 155

    (36) Instruccion2_Base -> PrintLneo Pto_Coma .

    Llave_Cierra    reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    Print           reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    PrintLn         reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    Scan            reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    Repeat          reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    Llave_Abre      reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    If              reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    For             reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    While           reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)
    ID              reduce using rule 36 (Instruccion2_Base -> PrintLneo Pto_Coma .)


state 156

    (38) Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .

    Llave_Cierra    reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    Print           reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    PrintLn         reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    Scan            reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    Repeat          reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    Llave_Abre      reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    If              reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    For             reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    While           reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)
    ID              reduce using rule 38 (Instruccion2_Base -> Ciclo_Repeat3 Pto_Coma .)


state 157

    (39) Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .

    Llave_Cierra    reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    Print           reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    PrintLn         reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    Scan            reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    Repeat          reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    Llave_Abre      reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    If              reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    For             reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    While           reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)
    ID              reduce using rule 39 (Instruccion2_Base -> Ciclo_Repeat1 Pto_Coma .)


state 158

    (37) Instruccion2_Base -> Scaneo Pto_Coma .

    Llave_Cierra    reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    Print           reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    PrintLn         reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    Scan            reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    Repeat          reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    Llave_Abre      reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    If              reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    For             reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    While           reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)
    ID              reduce using rule 37 (Instruccion2_Base -> Scaneo Pto_Coma .)


state 159

    (34) Instruccion2_Base -> Instruccion_Type Pto_Coma .

    Llave_Cierra    reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    Print           reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    PrintLn         reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    Scan            reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    Repeat          reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    Llave_Abre      reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    If              reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    For             reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    While           reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)
    ID              reduce using rule 34 (Instruccion2_Base -> Instruccion_Type Pto_Coma .)


state 160

    (56) Bloque -> Llave_Abre Declaracion Instruccion2 Llave_Cierra .

    ElseIf          reduce using rule 56 (Bloque -> Llave_Abre Declaracion Instruccion2 Llave_Cierra .)
    Else            reduce using rule 56 (Bloque -> Llave_Abre Declaracion Instruccion2 Llave_Cierra .)
    $end            reduce using rule 56 (Bloque -> Llave_Abre Declaracion Instruccion2 Llave_Cierra .)
    While           reduce using rule 56 (Bloque -> Llave_Abre Declaracion Instruccion2 Llave_Cierra .)
    Pto_Coma        reduce using rule 56 (Bloque -> Llave_Abre Declaracion Instruccion2 Llave_Cierra .)


state 161

    (41) Instruccion2 -> Instruccion2 Instruccion2_Base .

    Llave_Cierra    reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    Print           reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    PrintLn         reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    Scan            reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    Repeat          reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    Llave_Abre      reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    If              reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    For             reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    While           reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)
    ID              reduce using rule 41 (Instruccion2 -> Instruccion2 Instruccion2_Base .)


state 162

    (35) Instruccion2_Base -> Printeo Pto_Coma .

    Llave_Cierra    reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    Print           reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    PrintLn         reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    Scan            reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    Repeat          reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    Llave_Abre      reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    If              reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    For             reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    While           reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)
    ID              reduce using rule 35 (Instruccion2_Base -> Printeo Pto_Coma .)


state 163

    (71) Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra . Do Bloque

    Do              shift and go to state 175


state 164

    (59) Condicion -> If Par_Abre Expresion Par_Cierra . Cuerpo
    (60) Condicion -> If Par_Abre Expresion Par_Cierra . Cuerpo Condicion_Else_If
    (57) Cuerpo -> . Instruccion1
    (58) Cuerpo -> . Bloque
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    Instruccion1                   shift and go to state 24
    id                             shift and go to state 7
    PrintLneo                      shift and go to state 10
    Cuerpo                         shift and go to state 176
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Printeo                        shift and go to state 9
    Bloque                         shift and go to state 25

state 165

    (65) Ciclo_For -> For id Direccion id Do . Cuerpo
    (57) Cuerpo -> . Instruccion1
    (58) Cuerpo -> . Bloque
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    Instruccion1                   shift and go to state 24
    id                             shift and go to state 7
    PrintLneo                      shift and go to state 10
    Cuerpo                         shift and go to state 177
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Printeo                        shift and go to state 9
    Bloque                         shift and go to state 25

state 166

    (66) Ciclo_For -> For id Direccion Expresion Do . Cuerpo
    (57) Cuerpo -> . Instruccion1
    (58) Cuerpo -> . Bloque
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    Instruccion1                   shift and go to state 24
    id                             shift and go to state 7
    PrintLneo                      shift and go to state 10
    Cuerpo                         shift and go to state 178
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Printeo                        shift and go to state 9
    Bloque                         shift and go to state 25

state 167

    (67) Ciclo_For -> For id Direccion Llave_Abre ListaNumeros . Llave_Cierra Do Cuerpo
    (76) Expresion -> Llave_Abre ListaNumeros . Llave_Cierra
    (13) ListaNumeros -> ListaNumeros . Coma Aux_ListaNumeros

    Llave_Cierra    shift and go to state 179
    Coma            shift and go to state 143


state 168

    (13) ListaNumeros -> ListaNumeros Coma Aux_ListaNumeros .

    Llave_Cierra    reduce using rule 13 (ListaNumeros -> ListaNumeros Coma Aux_ListaNumeros .)
    Coma            reduce using rule 13 (ListaNumeros -> ListaNumeros Coma Aux_ListaNumeros .)


state 169

    (9) Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .
    (76) Expresion -> Llave_Abre ListaNumeros Llave_Cierra .

  ! reduce/reduce conflict for $end resolved using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
  ! reduce/reduce conflict for While resolved using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
  ! reduce/reduce conflict for Pto_Coma resolved using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
  ! reduce/reduce conflict for ElseIf resolved using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
  ! reduce/reduce conflict for Else resolved using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
    While           reduce using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
    Pto_Coma        reduce using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
    ElseIf          reduce using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
    Else            reduce using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
    $end            reduce using rule 9 (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra .)
    Suma            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Resta           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Mult            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Div             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Mod             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Union           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Dif             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Inter           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    SumaConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Or              reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    And             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    RestaConj       reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    MultConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    DivConj         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    ModConj         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Equiv           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Greater         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Less            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    GreaterEqual    reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    LessEqual       reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    IsInConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    NotEquiv        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)

  ! $end            [ reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .) ]
  ! While           [ reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .) ]
  ! Pto_Coma        [ reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .) ]
  ! ElseIf          [ reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .) ]
  ! Else            [ reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .) ]


state 170

    (70) Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion . Par_Cierra Do Instruccion1
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Par_Cierra      shift and go to state 180
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 171

    (72) Ciclo_Repeat3 -> Repeat Bloque While Par_Abre Expresion . Par_Cierra
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Par_Cierra      shift and go to state 181
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 172

    (43) ListaVariables -> ListaVariables Coma . Aux_ListaVariables
    (44) Aux_ListaVariables -> . id
    (5) id -> . ID

    ID              shift and go to state 20

    Aux_ListaVariables             shift and go to state 182
    id                             shift and go to state 183

state 173

    (45) Lista_Declaracion_Base -> Type ListaVariables Pto_Coma .

    In              reduce using rule 45 (Lista_Declaracion_Base -> Type ListaVariables Pto_Coma .)
    Set             reduce using rule 45 (Lista_Declaracion_Base -> Type ListaVariables Pto_Coma .)
    Bool            reduce using rule 45 (Lista_Declaracion_Base -> Type ListaVariables Pto_Coma .)
    Int             reduce using rule 45 (Lista_Declaracion_Base -> Type ListaVariables Pto_Coma .)


state 174

    (46) Lista_Declaracion_Base -> Type id Equal . Expresion Pto_Coma
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 184
    Numeros                        shift and go to state 29
    Boolean                        shift and go to state 45
    id                             shift and go to state 31

state 175

    (71) Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra Do . Bloque
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra

    Llave_Abre      shift and go to state 18

    Bloque                         shift and go to state 185

state 176

    (59) Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo .
    (60) Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo . Condicion_Else_If
    (62) Condicion_Else_If -> . ElseIf Par_Abre Expresion Par_Cierra Cuerpo
    (63) Condicion_Else_If -> . ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (64) Condicion_Else_If -> . Condicion_Else
    (61) Condicion_Else -> . Else Cuerpo

  ! shift/reduce conflict for ElseIf resolved as shift
  ! shift/reduce conflict for Else resolved as shift
    $end            reduce using rule 59 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo .)
    While           reduce using rule 59 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo .)
    Pto_Coma        reduce using rule 59 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo .)
    ElseIf          shift and go to state 189
    Else            shift and go to state 187

  ! ElseIf          [ reduce using rule 59 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo .) ]
  ! Else            [ reduce using rule 59 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo .) ]

    Condicion_Else                 shift and go to state 186
    Condicion_Else_If              shift and go to state 188

state 177

    (65) Ciclo_For -> For id Direccion id Do Cuerpo .

    ElseIf          reduce using rule 65 (Ciclo_For -> For id Direccion id Do Cuerpo .)
    Else            reduce using rule 65 (Ciclo_For -> For id Direccion id Do Cuerpo .)
    $end            reduce using rule 65 (Ciclo_For -> For id Direccion id Do Cuerpo .)
    While           reduce using rule 65 (Ciclo_For -> For id Direccion id Do Cuerpo .)
    Pto_Coma        reduce using rule 65 (Ciclo_For -> For id Direccion id Do Cuerpo .)


state 178

    (66) Ciclo_For -> For id Direccion Expresion Do Cuerpo .

    ElseIf          reduce using rule 66 (Ciclo_For -> For id Direccion Expresion Do Cuerpo .)
    Else            reduce using rule 66 (Ciclo_For -> For id Direccion Expresion Do Cuerpo .)
    $end            reduce using rule 66 (Ciclo_For -> For id Direccion Expresion Do Cuerpo .)
    While           reduce using rule 66 (Ciclo_For -> For id Direccion Expresion Do Cuerpo .)
    Pto_Coma        reduce using rule 66 (Ciclo_For -> For id Direccion Expresion Do Cuerpo .)


state 179

    (67) Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra . Do Cuerpo
    (76) Expresion -> Llave_Abre ListaNumeros Llave_Cierra .

  ! shift/reduce conflict for Do resolved as shift
    Do              shift and go to state 190
    Suma            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Resta           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Mult            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Div             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Mod             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Union           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Dif             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Inter           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    SumaConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Or              reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    And             reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    RestaConj       reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    MultConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    DivConj         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    ModConj         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Equiv           reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Greater         reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    Less            reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    GreaterEqual    reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    LessEqual       reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    IsInConj        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)
    NotEquiv        reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .)

  ! Do              [ reduce using rule 76 (Expresion -> Llave_Abre ListaNumeros Llave_Cierra .) ]


state 180

    (70) Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra . Do Instruccion1

    Do              shift and go to state 191


state 181

    (72) Ciclo_Repeat3 -> Repeat Bloque While Par_Abre Expresion Par_Cierra .

    ElseIf          reduce using rule 72 (Ciclo_Repeat3 -> Repeat Bloque While Par_Abre Expresion Par_Cierra .)
    Else            reduce using rule 72 (Ciclo_Repeat3 -> Repeat Bloque While Par_Abre Expresion Par_Cierra .)
    $end            reduce using rule 72 (Ciclo_Repeat3 -> Repeat Bloque While Par_Abre Expresion Par_Cierra .)
    While           reduce using rule 72 (Ciclo_Repeat3 -> Repeat Bloque While Par_Abre Expresion Par_Cierra .)
    Pto_Coma        reduce using rule 72 (Ciclo_Repeat3 -> Repeat Bloque While Par_Abre Expresion Par_Cierra .)


state 182

    (43) ListaVariables -> ListaVariables Coma Aux_ListaVariables .

    Pto_Coma        reduce using rule 43 (ListaVariables -> ListaVariables Coma Aux_ListaVariables .)
    Coma            reduce using rule 43 (ListaVariables -> ListaVariables Coma Aux_ListaVariables .)


state 183

    (44) Aux_ListaVariables -> id .

    Pto_Coma        reduce using rule 44 (Aux_ListaVariables -> id .)
    Coma            reduce using rule 44 (Aux_ListaVariables -> id .)


state 184

    (46) Lista_Declaracion_Base -> Type id Equal Expresion . Pto_Coma
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Pto_Coma        shift and go to state 192
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 185

    (71) Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra Do Bloque .

    Pto_Coma        reduce using rule 71 (Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra Do Bloque .)
    ElseIf          reduce using rule 71 (Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra Do Bloque .)
    Else            reduce using rule 71 (Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra Do Bloque .)
    $end            reduce using rule 71 (Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra Do Bloque .)
    While           reduce using rule 71 (Ciclo_Repeat2 -> While Par_Abre Expresion Par_Cierra Do Bloque .)


state 186

    (64) Condicion_Else_If -> Condicion_Else .

    ElseIf          reduce using rule 64 (Condicion_Else_If -> Condicion_Else .)
    Else            reduce using rule 64 (Condicion_Else_If -> Condicion_Else .)
    $end            reduce using rule 64 (Condicion_Else_If -> Condicion_Else .)
    While           reduce using rule 64 (Condicion_Else_If -> Condicion_Else .)
    Pto_Coma        reduce using rule 64 (Condicion_Else_If -> Condicion_Else .)


state 187

    (61) Condicion_Else -> Else . Cuerpo
    (57) Cuerpo -> . Instruccion1
    (58) Cuerpo -> . Bloque
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    id                             shift and go to state 7
    Printeo                        shift and go to state 9
    PrintLneo                      shift and go to state 10
    Cuerpo                         shift and go to state 193
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Instruccion1                   shift and go to state 24
    Bloque                         shift and go to state 25

state 188

    (60) Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .

    ElseIf          reduce using rule 60 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)
    Else            reduce using rule 60 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)
    $end            reduce using rule 60 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)
    While           reduce using rule 60 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)
    Pto_Coma        reduce using rule 60 (Condicion -> If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)


state 189

    (62) Condicion_Else_If -> ElseIf . Par_Abre Expresion Par_Cierra Cuerpo
    (63) Condicion_Else_If -> ElseIf . Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If

    Par_Abre        shift and go to state 194


state 190

    (67) Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do . Cuerpo
    (57) Cuerpo -> . Instruccion1
    (58) Cuerpo -> . Bloque
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    Instruccion1                   shift and go to state 24
    id                             shift and go to state 7
    PrintLneo                      shift and go to state 10
    Cuerpo                         shift and go to state 195
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Printeo                        shift and go to state 9
    Bloque                         shift and go to state 25

state 191

    (70) Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do . Instruccion1
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    Llave_Abre      shift and go to state 18
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    id                             shift and go to state 7
    Printeo                        shift and go to state 9
    PrintLneo                      shift and go to state 10
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Ciclo_Repeat2                  shift and go to state 14
    Instruccion1                   shift and go to state 196
    Bloque                         shift and go to state 114

state 192

    (46) Lista_Declaracion_Base -> Type id Equal Expresion Pto_Coma .

    In              reduce using rule 46 (Lista_Declaracion_Base -> Type id Equal Expresion Pto_Coma .)
    Set             reduce using rule 46 (Lista_Declaracion_Base -> Type id Equal Expresion Pto_Coma .)
    Bool            reduce using rule 46 (Lista_Declaracion_Base -> Type id Equal Expresion Pto_Coma .)
    Int             reduce using rule 46 (Lista_Declaracion_Base -> Type id Equal Expresion Pto_Coma .)


state 193

    (61) Condicion_Else -> Else Cuerpo .

    ElseIf          reduce using rule 61 (Condicion_Else -> Else Cuerpo .)
    Else            reduce using rule 61 (Condicion_Else -> Else Cuerpo .)
    $end            reduce using rule 61 (Condicion_Else -> Else Cuerpo .)
    While           reduce using rule 61 (Condicion_Else -> Else Cuerpo .)
    Pto_Coma        reduce using rule 61 (Condicion_Else -> Else Cuerpo .)


state 194

    (62) Condicion_Else_If -> ElseIf Par_Abre . Expresion Par_Cierra Cuerpo
    (63) Condicion_Else_If -> ElseIf Par_Abre . Expresion Par_Cierra Cuerpo Condicion_Else_If
    (73) Expresion -> . Boolean
    (74) Expresion -> . Numeros
    (75) Expresion -> . id
    (76) Expresion -> . Llave_Abre ListaNumeros Llave_Cierra
    (77) Expresion -> . Llave_Abre Llave_Cierra
    (78) Expresion -> . Par_Abre Expresion Par_Cierra
    (79) Expresion -> . Not Expresion
    (80) Expresion -> . Resta Expresion
    (81) Expresion -> . MaxConj Expresion
    (82) Expresion -> . MinConj Expresion
    (83) Expresion -> . NumElemConj Expresion
    (84) Expresion -> . Expresion Suma Expresion
    (85) Expresion -> . Expresion Resta Expresion
    (86) Expresion -> . Expresion Mult Expresion
    (87) Expresion -> . Expresion Div Expresion
    (88) Expresion -> . Expresion Mod Expresion
    (89) Expresion -> . Expresion Union Expresion
    (90) Expresion -> . Expresion Dif Expresion
    (91) Expresion -> . Expresion Inter Expresion
    (92) Expresion -> . Expresion SumaConj Expresion
    (93) Expresion -> . Expresion Or Expresion
    (94) Expresion -> . Expresion And Expresion
    (95) Expresion -> . Expresion RestaConj Expresion
    (96) Expresion -> . Expresion MultConj Expresion
    (97) Expresion -> . Expresion DivConj Expresion
    (98) Expresion -> . Expresion ModConj Expresion
    (99) Expresion -> . Expresion Equiv Expresion
    (100) Expresion -> . Expresion Greater Expresion
    (101) Expresion -> . Expresion Less Expresion
    (102) Expresion -> . Expresion GreaterEqual Expresion
    (103) Expresion -> . Expresion LessEqual Expresion
    (104) Expresion -> . Expresion IsInConj Expresion
    (105) Expresion -> . Expresion NotEquiv Expresion
    (3) Boolean -> . False
    (4) Boolean -> . True
    (7) Numeros -> . Number
    (5) id -> . ID

    Llave_Abre      shift and go to state 37
    Par_Abre        shift and go to state 28
    Not             shift and go to state 39
    Resta           shift and go to state 40
    MaxConj         shift and go to state 32
    MinConj         shift and go to state 30
    NumElemConj     shift and go to state 42
    False           shift and go to state 43
    True            shift and go to state 34
    Number          shift and go to state 44
    ID              shift and go to state 20

    Expresion                      shift and go to state 197
    Numeros                        shift and go to state 29
    Boolean                        shift and go to state 45
    id                             shift and go to state 31

state 195

    (67) Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo .

    ElseIf          reduce using rule 67 (Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo .)
    Else            reduce using rule 67 (Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo .)
    $end            reduce using rule 67 (Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo .)
    While           reduce using rule 67 (Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo .)
    Pto_Coma        reduce using rule 67 (Ciclo_For -> For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo .)


state 196

    (70) Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1 .

    $end            reduce using rule 70 (Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1 .)
    While           reduce using rule 70 (Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1 .)
    ElseIf          reduce using rule 70 (Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1 .)
    Else            reduce using rule 70 (Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1 .)
    Pto_Coma        reduce using rule 70 (Ciclo_Repeat1 -> Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1 .)


state 197

    (62) Condicion_Else_If -> ElseIf Par_Abre Expresion . Par_Cierra Cuerpo
    (63) Condicion_Else_If -> ElseIf Par_Abre Expresion . Par_Cierra Cuerpo Condicion_Else_If
    (84) Expresion -> Expresion . Suma Expresion
    (85) Expresion -> Expresion . Resta Expresion
    (86) Expresion -> Expresion . Mult Expresion
    (87) Expresion -> Expresion . Div Expresion
    (88) Expresion -> Expresion . Mod Expresion
    (89) Expresion -> Expresion . Union Expresion
    (90) Expresion -> Expresion . Dif Expresion
    (91) Expresion -> Expresion . Inter Expresion
    (92) Expresion -> Expresion . SumaConj Expresion
    (93) Expresion -> Expresion . Or Expresion
    (94) Expresion -> Expresion . And Expresion
    (95) Expresion -> Expresion . RestaConj Expresion
    (96) Expresion -> Expresion . MultConj Expresion
    (97) Expresion -> Expresion . DivConj Expresion
    (98) Expresion -> Expresion . ModConj Expresion
    (99) Expresion -> Expresion . Equiv Expresion
    (100) Expresion -> Expresion . Greater Expresion
    (101) Expresion -> Expresion . Less Expresion
    (102) Expresion -> Expresion . GreaterEqual Expresion
    (103) Expresion -> Expresion . LessEqual Expresion
    (104) Expresion -> Expresion . IsInConj Expresion
    (105) Expresion -> Expresion . NotEquiv Expresion

    Par_Cierra      shift and go to state 198
    Suma            shift and go to state 70
    Resta           shift and go to state 75
    Mult            shift and go to state 81
    Div             shift and go to state 65
    Mod             shift and go to state 71
    Union           shift and go to state 64
    Dif             shift and go to state 73
    Inter           shift and go to state 76
    SumaConj        shift and go to state 78
    Or              shift and go to state 77
    And             shift and go to state 68
    RestaConj       shift and go to state 67
    MultConj        shift and go to state 72
    DivConj         shift and go to state 74
    ModConj         shift and go to state 82
    Equiv           shift and go to state 83
    Greater         shift and go to state 66
    Less            shift and go to state 80
    GreaterEqual    shift and go to state 79
    LessEqual       shift and go to state 69
    IsInConj        shift and go to state 63
    NotEquiv        shift and go to state 62


state 198

    (62) Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra . Cuerpo
    (63) Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra . Cuerpo Condicion_Else_If
    (57) Cuerpo -> . Instruccion1
    (58) Cuerpo -> . Bloque
    (30) Instruccion1 -> . Instruccion_Type
    (31) Instruccion1 -> . Printeo
    (32) Instruccion1 -> . PrintLneo
    (33) Instruccion1 -> . Scaneo
    (55) Bloque -> . Llave_Abre Declaracion Llave_Cierra
    (56) Bloque -> . Llave_Abre Declaracion Instruccion2 Llave_Cierra
    (22) Instruccion_Type -> . Asignacion
    (23) Instruccion_Type -> . Bloque
    (24) Instruccion_Type -> . Asignacion_Conj
    (25) Instruccion_Type -> . Condicion
    (26) Instruccion_Type -> . Ciclo_For
    (27) Instruccion_Type -> . Ciclo_Repeat1
    (28) Instruccion_Type -> . Ciclo_Repeat2
    (29) Instruccion_Type -> . Ciclo_Repeat3
    (17) Printeo -> . Print ListaComa
    (16) PrintLneo -> . PrintLn ListaComa
    (15) Scaneo -> . Scan id
    (14) Asignacion -> . id Equal Expresion
    (8) Asignacion_Conj -> . id Equal Llave_Abre Llave_Cierra
    (9) Asignacion_Conj -> . id Equal Llave_Abre ListaNumeros Llave_Cierra
    (59) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo
    (60) Condicion -> . If Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (65) Ciclo_For -> . For id Direccion id Do Cuerpo
    (66) Ciclo_For -> . For id Direccion Expresion Do Cuerpo
    (67) Ciclo_For -> . For id Direccion Llave_Abre ListaNumeros Llave_Cierra Do Cuerpo
    (70) Ciclo_Repeat1 -> . Repeat Instruccion1 While Par_Abre Expresion Par_Cierra Do Instruccion1
    (71) Ciclo_Repeat2 -> . While Par_Abre Expresion Par_Cierra Do Bloque
    (72) Ciclo_Repeat3 -> . Repeat Bloque While Par_Abre Expresion Par_Cierra
    (5) id -> . ID

    Llave_Abre      shift and go to state 18
    Print           shift and go to state 6
    PrintLn         shift and go to state 12
    Scan            shift and go to state 22
    If              shift and go to state 26
    For             shift and go to state 4
    Repeat          shift and go to state 8
    While           shift and go to state 19
    ID              shift and go to state 20

    Ciclo_For                      shift and go to state 3
    Condicion                      shift and go to state 5
    Instruccion1                   shift and go to state 24
    id                             shift and go to state 7
    PrintLneo                      shift and go to state 10
    Cuerpo                         shift and go to state 199
    Ciclo_Repeat3                  shift and go to state 13
    Ciclo_Repeat2                  shift and go to state 14
    Ciclo_Repeat1                  shift and go to state 15
    Asignacion                     shift and go to state 16
    Scaneo                         shift and go to state 17
    Instruccion_Type               shift and go to state 21
    Asignacion_Conj                shift and go to state 23
    Printeo                        shift and go to state 9
    Bloque                         shift and go to state 25

state 199

    (62) Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo .
    (63) Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo . Condicion_Else_If
    (62) Condicion_Else_If -> . ElseIf Par_Abre Expresion Par_Cierra Cuerpo
    (63) Condicion_Else_If -> . ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If
    (64) Condicion_Else_If -> . Condicion_Else
    (61) Condicion_Else -> . Else Cuerpo

  ! shift/reduce conflict for ElseIf resolved as shift
  ! shift/reduce conflict for Else resolved as shift
    $end            reduce using rule 62 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo .)
    While           reduce using rule 62 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo .)
    Pto_Coma        reduce using rule 62 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo .)
    ElseIf          shift and go to state 189
    Else            shift and go to state 187

  ! ElseIf          [ reduce using rule 62 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo .) ]
  ! Else            [ reduce using rule 62 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo .) ]

    Condicion_Else                 shift and go to state 186
    Condicion_Else_If              shift and go to state 200

state 200

    (63) Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .

    ElseIf          reduce using rule 63 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)
    Else            reduce using rule 63 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)
    $end            reduce using rule 63 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)
    While           reduce using rule 63 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)
    Pto_Coma        reduce using rule 63 (Condicion_Else_If -> ElseIf Par_Abre Expresion Par_Cierra Cuerpo Condicion_Else_If .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for While in state 48 resolved as shift
WARNING: shift/reduce conflict for Pto_Coma in state 108 resolved as shift
WARNING: shift/reduce conflict for Pto_Coma in state 109 resolved as shift
WARNING: shift/reduce conflict for Do in state 117 resolved as shift
WARNING: shift/reduce conflict for ElseIf in state 176 resolved as shift
WARNING: shift/reduce conflict for Else in state 176 resolved as shift
WARNING: shift/reduce conflict for Do in state 179 resolved as shift
WARNING: shift/reduce conflict for ElseIf in state 199 resolved as shift
WARNING: shift/reduce conflict for Else in state 199 resolved as shift
WARNING: reduce/reduce conflict in state 25 resolved using rule (Instruccion_Type -> Bloque)
WARNING: rejected rule (Cuerpo -> Bloque) in state 25
WARNING: reduce/reduce conflict in state 84 resolved using rule (Aux_ListaNumeros -> Numeros)
WARNING: rejected rule (Expresion -> Numeros) in state 84
WARNING: reduce/reduce conflict in state 146 resolved using rule (Asignacion_Conj -> id Equal Llave_Abre Llave_Cierra)
WARNING: rejected rule (Expresion -> Llave_Abre Llave_Cierra) in state 146
WARNING: reduce/reduce conflict in state 169 resolved using rule (Asignacion_Conj -> id Equal Llave_Abre ListaNumeros Llave_Cierra)
WARNING: rejected rule (Expresion -> Llave_Abre ListaNumeros Llave_Cierra) in state 169
WARNING: Rule (Cuerpo -> Bloque) is never reduced
